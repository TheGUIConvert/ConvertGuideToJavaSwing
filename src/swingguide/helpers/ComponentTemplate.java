/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.helpers;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerEvent;
import java.awt.event.ItemEvent;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Date;
import java.util.EventObject;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.plaf.synth.SynthSplitPaneUI;

/**
 *
 */
public abstract class ComponentTemplate extends javax.swing.JPanel {

    private int eventCount = 0;

    private int difference = 0;

    protected ArrayList<EventButton> eventButtons;
    protected ArrayList<EventButton> visibleEventButtons;
    
    protected ArrayList<ComponentPanel> componentPanels;
    
    protected Component primaryComponent;
    protected Object constraints;
    
    /**
     * The Primary Frame
     */
    public ComponentTemplate() {
        initComponents();
        
        componentPanels = new ArrayList<>();
        
        eventButtons = new ArrayList<>();
        visibleEventButtons = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPaneComponent = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSplitPane5 = new javax.swing.JSplitPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jSplitPane1.setDividerLocation(580);

        jSplitPaneComponent.setDividerLocation(730);
        jSplitPaneComponent.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Example"));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(232, 232, 232));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPaneComponent.setRightComponent(jScrollPane1);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(189, 210, 219), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)))));
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(400, 441));
        jTabbedPane2.setPreferredSize(new java.awt.Dimension(400, 441));
        jSplitPane5.setLeftComponent(jTabbedPane2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setLayout(new java.awt.GridBagLayout());
        jSplitPane5.setRightComponent(jPanel3);

        jSplitPaneComponent.setLeftComponent(jSplitPane5);

        jSplitPane1.setLeftComponent(jSplitPaneComponent);

        jSplitPane3.setDividerLocation(500);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Events and Output"));

        jTextArea2.setBackground(new java.awt.Color(239, 239, 239));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jSplitPane3.setBottomComponent(jScrollPane3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Events"));
        jPanel5.setLayout(new java.awt.GridBagLayout());
        jScrollPane2.setViewportView(jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1121, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );

        jSplitPane3.setLeftComponent(jPanel1);

        jSplitPane1.setRightComponent(jSplitPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1405, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int newDivLoc = getSize().width - difference;
        jSplitPane1.setDividerLocation(newDivLoc);
    }//GEN-LAST:event_formComponentResized

    private String getDataFromEvent(EventObject event) {
        String text = "";
        if (event instanceof ListSelectionEvent) {
            text = "Is value adjusting: " + ((ListSelectionEvent) event).getValueIsAdjusting() + "\n"
                    + "First index: " + ((ListSelectionEvent) event).getFirstIndex() + "\n"
                    + "Last index: " + ((ListSelectionEvent) event).getLastIndex() + "\n";
        } else if (event instanceof TableModelEvent) {
            text = "Type (i.e. action): " + ((TableModelEvent) event).getType() + "\n"
                    + "Column Index that was affected: " + ((TableModelEvent) event).getColumn() + "\n"
                    + "First Row Index that was affected: " + ((TableModelEvent) event).getFirstRow() + "\n"
                    + "Last Row Index that was affected: " + ((TableModelEvent) event).getLastRow() + "\n";
        } else if (event instanceof TableColumnModelEvent) {
            text = "From index: " + ((TableColumnModelEvent) event).getFromIndex() + "\n"
                    + "To index: " + ((TableColumnModelEvent) event).getToIndex() + "\n";
        } else if (event instanceof ListDataEvent) {
            text = "Type: " + ((ListDataEvent) event).getType()+ "\n"
                    + "Lower Index: " + ((ListDataEvent) event).getIndex0()+ "\n"
                    + "Upper Index: " + ((ListDataEvent) event).getIndex1()+ "\n";
        } else if (event instanceof ChangeEvent) {
            if (event.getSource() instanceof JButton) {
                text = "The button state has changed:\n"
                        + "    Is Armed: " + ((JButton)event.getSource()).getModel().isArmed() + "\n"
                        + "    Is Selected: " + ((JButton)event.getSource()).getModel().isSelected() + "\n"
                        + "    Is Enabled: " + ((JButton)event.getSource()).getModel().isEnabled() + "\n"
                        + "    Is Pressed: " + ((JButton)event.getSource()).getModel().isPressed() + "\n"
                        + "    Is Rollover: " + ((JButton)event.getSource()).getModel().isRollover() + "\n";
            }
        } else if (event instanceof PropertyChangeEvent) {
            text = "Property Name: " + ((PropertyChangeEvent) event).getPropertyName() + "\n"
                    + "Propagation ID: " + ((PropertyChangeEvent) event).getPropagationId() + "\n"
                    + "Old Value: " + ((PropertyChangeEvent) event).getOldValue() + "\n"
                    + "New Value: " + ((PropertyChangeEvent) event).getNewValue() + "\n";
        } else if (event instanceof RowSorterEvent) {
            text = "Type: " + ((RowSorterEvent) event).getType() + "\n"
                    + "Previous Row Count: " + ((RowSorterEvent) event).getPreviousRowCount() + "\n";
        } else if (event instanceof ActionEvent) {
            text = "Action Command: " + ((ActionEvent) event).getActionCommand() + "\n"
                    + "Modifers Keys\n"
                    + "    SHIFT: " + (((((ActionEvent) event).getModifiers())& ActionEvent.SHIFT_MASK)>0) + "\n"
                    + "     CTRL: " + (((((ActionEvent) event).getModifiers())& ActionEvent.CTRL_MASK)>0) + "\n"
                    + "     META: " + (((((ActionEvent) event).getModifiers())& ActionEvent.META_MASK)>0) + "\n"
                    + "      ALT: " + (((((ActionEvent) event).getModifiers())& ActionEvent.ALT_MASK)>0) + "\n"
                    + "Timestamp of when this occured: " + (new Date(((ActionEvent) event).getWhen()))+ "\n";
        } else if(event instanceof ContainerEvent){
            text = "Source: " + ((ContainerEvent) event).getContainer().getClass().getSimpleName() + "(hash: "+((ContainerEvent) event).getContainer().hashCode()+")\n";
            if(((ContainerEvent) event).getID() == ContainerEvent.COMPONENT_ADDED){
                text = text + "Type: COMPONENT_ADDED\n";
            } else if(((ContainerEvent) event).getID() == ContainerEvent.COMPONENT_REMOVED){
                text = text + "Type: COMPONENT_REMOVED\n";
            } else{
                text = text + "Type: unknown\n";
            }
            text = text + "Child: " + ((ContainerEvent) event).getChild().getClass().getSimpleName() + "(hash: "+((ContainerEvent) event).getChild().hashCode()+")\n";
        } else if(event instanceof ItemEvent){
            text = text + "Item: "+((ItemEvent)event).getItem()+"\n";
            int state = ((ItemEvent)event).getStateChange();
            String stateString = "unknown";
            if(state == ItemEvent.SELECTED){
                stateString = "SELECTED";
            }else if(state == ItemEvent.DESELECTED){
                stateString = "DESELECTED";
            }
            text = text + "State Change: "+stateString+"\n";
        } else if(event instanceof PopupMenuEvent){
            text = "Source: "+((PopupMenuEvent)event).getSource().getClass().getSimpleName()+"\n";
        } else{
            System.err.println("ERROR: " + event.getClass().getSimpleName());
        }
        return text;
    }

    protected String getDocumentationOfEvent(String eventName) {
        String text = "";
        if (eventName.compareToIgnoreCase("ListSelectionEvent") == 0) {
            text = "        System.out.println(\"Is value adjusting: \" + evt.getValueIsAdjusting());\n"
                    + "        System.out.println(\"First index: \" + evt.getFirstIndex());\n"
                    + "        System.out.println(\"Last index: \" + evt.getLastIndex());\n";
        } else if (eventName.compareToIgnoreCase("ListDataEvent") == 0) {
            text = "System.out.println(\"Type: \" + evt.getType());\n"
                    + "System.out.println(\"Lower Index: \" + evt.getIndex0());\n"
                    + "System.out.println(\"Upper Index: \" + evt.getIndex1());\n";
        } else if (eventName.compareToIgnoreCase("TableModelEvent") == 0) {
            text = "        System.out.println(\"Type (i.e. action): \" + ((TableModelEvent) evt).getType());\n"
                    + "        System.out.println(\"Column Index that was affected: \" + evt.getColumn());\n"
                    + "        System.out.println(\"First Row Index that was affected: \" + evt.getFirstRow());\n"
                    + "        System.out.println(\"Last Row Index that was affected: \" + evt.getLastRow());\n";
        } else if (eventName.compareToIgnoreCase("TableColumnModelEvent") == 0) {
            text = "        System.out.println(\"From index: \" + evt.getFromIndex());\n"
                    + "        System.out.println(\"To index: \" + evt.getToIndex());\n";
        } else if (eventName.compareToIgnoreCase("ChangeEvent") == 0) {
            text = "        System.out.println(\"Source (hash): \" + evt.getSource().getClass().getSimpleName() + \"(\" + evt.getSource().hashCode() + \")\");\n";
        } else if (eventName.compareToIgnoreCase("PropertyChangeEvent") == 0) {
            text = "            System.out.println(\"Property Name: \" + evt.getPropertyName());\n"
                    + "            System.out.println(\"Propagation ID: \" + evt.getPropagationId());\n"
                    + "            System.out.println(\"Old Value: \" + vt.getOldValue());\n"
                    + "            System.out.println(\"New Value: \" + evt.getNewValue());\n";
        } else if (eventName.compareToIgnoreCase("RowSorterEvent") == 0) {
            text = "            System.out.println(\"Type: \" + evt.getType());\n"
                    + "            System.out.println(\"Previous Row Count: \" + evt.getPreviousRowCount());\n"
                    + "            System.out.println(\"Previous Row Count: \" + evt.getPreviousRowCount());\n"
                    + "            // Note: Also has the ability to convert Column View index to COlumn Model index\n"
                    + "            //       evt.convertPreviousRowIndexToModel(oldViewIndex)";
        } else if (eventName.compareToIgnoreCase("ActionEvent") == 0) {
            text = "        System.out.println(\"Action Command: \" + evt.getActionCommand());\n"
                    + "        System.out.println(\"Modifier Keys\");\n"
                    + "        System.out.println(\"    SHIFT: \" + ((evt.getModifiers()& ActionEvent.SHIFT_MASK)>0));\n"
                    + "        System.out.println(\"     CTRL: \" + ((evt.getModifiers()& ActionEvent.CTRL_MASK)>0));\n"
                    + "        System.out.println(\"     META: \" + ((evt.getModifiers()& ActionEvent.META_MASK)>0));\n"
                    + "        System.out.println(\"      ALT: \" + ((evt.getModifiers()& ActionEvent.ALT_MASK)>0));\n"
                    + "        System.out.println(\"Timestamp of when this occured: \" + (new Date(evt.getWhen())));\n";
        }else if (eventName.compareToIgnoreCase("ItemEvent") == 0) {
            text = "        System.out.println(\"Item: \" + evt.getPropertyName());\n\n"
                    + "        String stateString = \"unknown\";\n"
                    + "        if(state == ItemEvent.SELECTED){\n"
                    + "            stateString = \"SELECTED\";\n"
                    + "        }else if(state == ItemEvent.DESELECTED){\n"
                    + "            stateString = \"DESELECTED\";\n"
                    + "        }\n\n"
                    + "        System.out.println(\"State Change: \" + stateString);\n";
        }else if (eventName.compareToIgnoreCase("PopupMenuEvent") == 0) {
            text = "        System.out.println(\"Source: \"+evt.getSource().getClass().getSimpleName());\n";
        }
        return text;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane5;
    protected javax.swing.JSplitPane jSplitPaneComponent;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

    public void setCodeTextArea(String text) {
        jTextArea1.setText(text);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jScrollPane1.getVerticalScrollBar().setValue(0);
                jScrollPane1.getHorizontalScrollBar().setValue(0);
            }
        });
    }

    private void addEventToTextArea(EventButton label, String midString, EventObject event) {
        eventCount++;
        Date date = new Date(System.currentTimeMillis());
        addTextToTextArea((eventCount) + ".) " + date.toString() + " - " + label.getEventLabel() + "\n\n" +
               midString + processEventText(event) + "\n\n\n\n");
    }

    public void addTextToTextArea(String text) {
        jTextArea2.setText(text + jTextArea2.getText());
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jScrollPane3.getVerticalScrollBar().setValue(0);
                jScrollPane3.getHorizontalScrollBar().setValue(0);
            }
        });
    }

    private String processEventText(EventObject event) {
        String text = "";
        char[] chars = event.toString().toCharArray();
        String tabChunk = "        ";
        String tabs = "";
        for (int index = 0; index < chars.length; index++) {
            if (chars[index] == '[') {
                tabs = tabs + tabChunk;
                text = text + "\n" + tabs;
            } else if (chars[index] == ']') {
                tabs = tabs.substring(tabChunk.length());
                text = text + "\n" + tabs;
            } else if (chars[index] == ',') {
                text = text + "\n" + tabs;
            } else if (chars[index] == ';') {
                text = text + "\n" + tabs;
            } else {
                text = text + chars[index];
            }
        }
        return text;
    }
    
    private void moveEvent(EventButton eventLabel){
        visibleEventButtons.remove(eventLabel);
        visibleEventButtons.add(0, eventLabel);
        rebuildEventPanel();
        jScrollPane2.getVerticalScrollBar().setValue(0);
    }
    
    private void rebuildEventPanel(){
        jPanel5.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();
        for(int index = 0; index < visibleEventButtons.size(); index++){
            gbc.gridx = 0;
            gbc.gridy = index;
            gbc.anchor = GridBagConstraints.NORTHWEST;
            gbc.weightx = 100.0;
          
            if(index == visibleEventButtons.size()-1){
                gbc.weighty = 100.0;
                gbc.insets = new java.awt.Insets(5, 10, 10, 10);
            }else{
                gbc.weighty = 0.0;
                gbc.insets = new java.awt.Insets(5, 10, 0, 10);
            }
            jPanel5.add(visibleEventButtons.get(index), gbc);
        }
    }
    
    private void eventFiredActions(EventButton eventButton, String midString, EventObject event) {
        addEventToTextArea(eventButton, getDataFromEvent(event), event);
        eventButton.eventFired(eventCount);
        moveEvent(eventButton);
    }
    
    protected void eventFiredActions(EventButton eventButton, EventObject event) {
        eventFiredActions(eventButton, "", event);
    }

    public void additionalSetup() {
        
        jSplitPane1.setUI(new SynthSplitPaneUI() {
            @Override
            protected void finishDraggingTo(int location) {
                super.finishDraggingTo(location); //To change body of generated methods, choose Tools | Templates.
                difference = jSplitPane1.getSize().width - jSplitPane1.getDividerLocation();
            }
        });
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jSplitPane1.setDividerLocation((int)(getWidth()-(jPanel5.getPreferredSize().getWidth()+60)));
            }
        });
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                difference = jSplitPane1.getSize().width - jSplitPane1.getDividerLocation();
            }
        });
        
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(25);

        addPrimaryComponent();
        
        setPrimaryComponentPanelTitle();
        
        customSetup();
        
        setupEventLabels();
        
        rebuildEventPanel();
    }
    
    protected JTabbedPane getTabbedPane(){
        return jTabbedPane2;
    }
    
    public JPanel getPrimaryComponentPanel(){
        return jPanel3;
    }
    
    private void addPrimaryComponent(){
        if (primaryComponent != null) {
            if(constraints != null){
                jPanel3.add(primaryComponent,constraints);
            }else{
                jPanel3.add(primaryComponent);
            }
        }
    }
    
    private void setPrimaryComponentPanelTitle(){
        ((TitledBorder)jPanel3.getBorder()).setTitle(getPrimaryComponentPanelTitle());
    }
 
    abstract protected void customSetup();
    abstract protected void setupEventLabels();
    abstract protected String getPrimaryComponentPanelTitle();
    
    public void sendMessage(int message, Object parameter) {
        for (ComponentPanel compPanel : componentPanels) {
            compPanel.processMessage(message, parameter);
        }
    }
}
