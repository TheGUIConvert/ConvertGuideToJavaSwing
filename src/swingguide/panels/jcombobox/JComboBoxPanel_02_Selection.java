/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jcombobox;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

/**
 *
 * @author Light
 */
public class JComboBoxPanel_02_Selection extends ComponentPanel {

    private JComboBox jComboBox1;
    private JComboBoxPanel jComboBoxPanel;
    
    /**
     * Creates new form NewJPanel
     */
    public JComboBoxPanel_02_Selection() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton6 = new javax.swing.JButton();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton20 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton6.setText("Clear Selection");

        jCheckBox4.setText("Set Key Selection Manager");

        jButton20.setText("Select Next Element");

        jLabel1.setText("Selected Item Index: -1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox4)
                    .addComponent(jButton20)
                    .addComponent(jButton6)
                    .addComponent(jLabel1))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton20)
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox4)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(270, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Selection";
    }
    
    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
        
        jComboBox1 = (JComboBox)primaryComponent;
        jComboBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                jLabel1.setText("Selected Item Index: "+jComboBox1.getSelectedIndex());
            }
        });
        jComboBox1.getModel().addListDataListener(new ListDataListener() {
            @Override
            public void intervalAdded(ListDataEvent e) {
                jLabel1.setText("Selected Item Index: "+jComboBox1.getSelectedIndex());
            }

            @Override
            public void intervalRemoved(ListDataEvent e) {
                jLabel1.setText("Selected Item Index: "+jComboBox1.getSelectedIndex());
            }

            @Override
            public void contentsChanged(ListDataEvent e) {
                jLabel1.setText("Selected Item Index: "+jComboBox1.getSelectedIndex());
            }
        });
        jComboBoxPanel = (JComboBoxPanel)componentTemplate;
        
        //Select Item
        jButton20.setAction(new AbstractAction(jButton20.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = jComboBox1.getSelectedIndex();
                int size = jComboBox1.getModel().getSize();
                if (size > 0) {
                    jComboBox1.setSelectedIndex((index + 1) % (size));
                }
                componentTemplate.setCodeTextArea(
                        "/*  Select Item  */\n\n"
                        + "int index = 3;\n"
                        + "int size = jComboBox1.getModel().getSize();\n"
                        + "if (index >= 0 && index < size) {\n"
                        + "    jComboBox1.setSelectedIndex(index);\n"
                        + "}\n"
                );
            }
        });

        //Clear Item Selection
        jButton6.setAction(new AbstractAction(jButton6.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBox1.setSelectedIndex(-1);
                componentTemplate.setCodeTextArea(
                        "/*  Clear Item Selection  */\n\n"
                        + "jComboBox1.setSelectedIndex(-1);\n"
                );
            }
        });

        //Set Custom Key Selection Manager
        jCheckBox4.setAction(new AbstractAction(jCheckBox4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox4.isSelected()) {
                    jComboBox1.setKeySelectionManager(new JComboBox.KeySelectionManager() {
                        @Override
                        public int selectionForKey(char aKey, ComboBoxModel<?> aModel) {
                            int charValue = (int) aKey - 49;
                            if (charValue >= 0 && charValue < 9 && charValue < jComboBox1.getItemCount()) {
                                return charValue;
                            } else {
                                return -1;
                            }
                        }
                    });
                } else {
                    jComboBox1.setKeySelectionManager(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Custom Key Selection Manager  */\n\n"
                        + "jComboBox1.setKeySelectionManager(new JComboBox.KeySelectionManager() {\n"
                        + "    @Override\n"
                        + "    public int selectionForKey(char aKey, ComboBoxModel<?> aModel) {\n"
                        + "        int charValue = (int) aKey - 49;\n"
                        + "        if (charValue >= 0 && charValue < 9 && charValue < jComboBox1.getItemCount()) {\n"
                        + "            return charValue;\n"
                        + "        } else {\n"
                        + "            return -1;\n"
                        + "        }\n"
                        + "    }\n"
                        + "});\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Returns the new Item selection index that is generated from the key that was pressed\n"
                        + "\n"
                        + "Note:\n"
                        + "    The JComboBox must have focus to use this new selection method\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jComboBox1.setKeySelectionManager(null);\n"
                        + "*/\n"
                );
            }
        });

        //Selected Item Index
        jLabel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Selected Item Index  */\n\n"
                        + "System.out.println(\"Selected Item Index: \"+jComboBox1.getSelectedIndex());\n"
                );
            }
        });
    }
}
