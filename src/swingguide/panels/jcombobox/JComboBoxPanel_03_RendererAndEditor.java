/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jcombobox;

import java.awt.BorderLayout;
import java.awt.Color;
import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListCellRenderer;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ComboBoxUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;

/**
 *
 * @author Light
 */
public class JComboBoxPanel_03_RendererAndEditor extends ComponentPanel {

    private JComboBox jComboBox1;
    private JComboBoxPanel jComboBoxPanel;
    
    /**
     * Creates new form NewJPanel
     */
    public JComboBoxPanel_03_RendererAndEditor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup2 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        jButton4 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        jButton4.setText("Give Focus to Editor");

        jCheckBox1.setText("Allow Editing");

        jButton3.setText("Set Editer Value");

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Editors"));

        buttonGroup2.add(jRadioButton3);
        jRadioButton3.setText("Add Value to End Editor");

        buttonGroup2.add(jRadioButton4);
        jRadioButton4.setText("Color Selector Editor");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addContainerGap(222, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton4))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Renderers"));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Custom JLabel");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Custom JPanel");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Select All Editor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Renderer and Editor";
    }
    
    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
        
        jComboBox1 = (JComboBox)primaryComponent;
        jComboBoxPanel = (JComboBoxPanel)componentTemplate;

        //Set Renderer that uses JLabel
        jRadioButton2.setAction(new AbstractAction(jRadioButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton2.isSelected()) {
                    jComboBox1.setRenderer(new ListCellRenderer() {
                        public Component getListCellRendererComponent(
                                JList list,
                                Object value,
                                int index,
                                boolean isSelected,
                                boolean cellHasFocus) {
                            JLabel label = new JLabel();
                            label.setPreferredSize(new Dimension(300, 100));
                            if (value != null) {
                                label.setOpaque(true);
                                if (isSelected) {
                                    label.setBackground(Color.GREEN.darker());
                                } else {
                                    label.setBackground(Color.GREEN);
                                }
                                label.setText(value.toString());
                            }
                            return label;
                        }
                    });
                    jComboBox1.repaint();
                } else {
                    ComboBoxUI tempUI = jComboBox1.getUI();
                    jComboBox1.setRenderer(null);
                    jComboBox1.setUI(tempUI);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Renderer that uses JLabel  */\n\n"
                        + "jComboBox1.setRenderer(new ListCellRenderer() {\n"
                        + "    public Component getListCellRendererComponent(\n"
                        + "            JList list,\n"
                        + "            Object value,\n"
                        + "            int index,\n"
                        + "            boolean isSelected,\n"
                        + "            boolean cellHasFocus) {\n"
                        + "        JLabel label = new JLabel();\n"
                        + "        label.setPreferredSize(new Dimension(300, 100));\n"
                        + "        if (value != null) {\n"
                        + "            label.setOpaque(true);\n"
                        + "            if (isSelected) {\n"
                        + "                label.setBackground(Color.GREEN.darker());\n"
                        + "            } else {\n"
                        + "                label.setBackground(Color.GREEN);\n"
                        + "            }\n"
                        + "            label.setText(value.toString());\n"
                        + "        }\n"
                        + "        return label;\n"
                        + "    }\n"
                        + "});\n"
                        + "jComboBox1.repaint();\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    ComboBoxUI tempUI = jComboBox1.getUI();\n"
                        + "    jComboBox1.setRenderer(null);\n"
                        + "    jComboBox1.setUI(tempUI);\n"
                        + "\n"
                        + "Note:\n"
                        + "    Opaque gets reset to false for the Selected Item.\n"
                        + "    Put JLabel in a JPanel to display background color\n"
                        + "      of the primary display spot (next to the arrow). \n"
                        + "*/\n"
                );
            }
        });

        //Set Renderer that uses JPanel
        jRadioButton1.setAction(new AbstractAction(jRadioButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton1.isSelected()) {
                    jComboBox1.setRenderer(new ListCellRenderer() {
                        public Component getListCellRendererComponent(
                                JList list,
                                Object value,
                                int index,
                                boolean isSelected,
                                boolean cellHasFocus) {
                            JPanel panel = new JPanel();
                            panel.setPreferredSize(new Dimension(300, 50));
                            panel.setLayout(new BorderLayout());
                            JLabel label = new JLabel();
                            label.setOpaque(true);
                            Color color = Color.GREEN;
                            if (index == -1) {
                                color = Color.RED;
                            }
                            if (value != null) {
                                if (value instanceof Color) {
                                    color = (Color) value;
                                }
                                label.setText(value.toString());
                            }
                            if (isSelected) {
                                label.setBorder(new LineBorder(color.darker(), 10));
                                label.setBackground(color.darker());
                            } else {
                                label.setBorder(new LineBorder(color, 10));
                                label.setBackground(color);
                            }
                            panel.add(label);
                            return panel;
                        }
                    });
                    jComboBox1.repaint();
                } else {
                    ComboBoxUI tempUI = jComboBox1.getUI();
                    jComboBox1.setRenderer(null);
                    jComboBox1.setUI(tempUI);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Renderer that uses JPanel  */\n\n"
                        + "jComboBox1.setRenderer(new ListCellRenderer() {\n"
                        + "    public Component getListCellRendererComponent(\n"
                        + "            JList list,\n"
                        + "            Object value,\n"
                        + "            int index,\n"
                        + "            boolean isSelected,\n"
                        + "            boolean cellHasFocus) {\n"
                        + "        JPanel panel = new JPanel();\n"
                        + "        panel.setPreferredSize(new Dimension(300, 50));\n"
                        + "        panel.setLayout(new BorderLayout());\n"
                        + "        JLabel label = new JLabel();\n"
                        + "        label.setOpaque(true);\n"
                        + "        Color color = Color.GREEN;\n"
                        + "        if (index == -1) {\n"
                        + "            color = Color.RED;\n"
                        + "        }\n"
                        + "        if (value != null) {\n"
                        + "            if (value instanceof Color) {\n"
                        + "                color = (Color) value;\n"
                        + "            }\n"
                        + "            label.setText(value.toString());\n"
                        + "        }\n"
                        + "        if (isSelected) {\n"
                        + "            label.setBorder(new LineBorder(color.darker(), 10));\n"
                        + "            label.setBackground(color.darker());\n"
                        + "        } else {\n"
                        + "            label.setBorder(new LineBorder(color, 10));\n"
                        + "            label.setBackground(color);\n"
                        + "        }\n"
                        + "        panel.add(label);\n"
                        + "        return panel;\n"
                        + "    }\n"
                        + "});\n"
                        + "jComboBox1.repaint();\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    ComboBoxUI tempUI = jComboBox1.getUI();\n"
                        + "    jComboBox1.setRenderer(null);\n"
                        + "    jComboBox1.setUI(tempUI);\n"
                        + "\n"
                        + "Note:\n"
                        + "    An index of -1 (passed to getListCellRendererComponent) is the Item\n"
                        + "      to be drawn in the primary display spot (next to the arrow).\n"
                        + "*/\n"
                );
            }
        });

        //Allow Editing
        jCheckBox1.setAction(new AbstractAction(jCheckBox1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox1.isSelected()) {
                    jComboBox1.setEditable(true);
                    jComboBox1.revalidate();
                    jComboBox1.repaint();
                } else {
                    jComboBox1.setEditable(false);
                    jComboBox1.revalidate();
                    jComboBox1.repaint();
                }
                componentTemplate.setCodeTextArea(
                        "/*  Allow Editing  */\n\n"
                        + "jComboBox1.setEditable(true);\n"
                        + "jComboBox1.revalidate();\n"
                        + "jComboBox1.repaint();\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jComboBox1.setEditable(false);\n"
                        + "    jComboBox1.revalidate();\n"
                        + "    jComboBox1.repaint()\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Request Editor Focus
        jButton4.setAction(new AbstractAction(jButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jComboBox1.getEditor() != null) {
                    jComboBox1.getEditor().getEditorComponent().requestFocus();
                }
                componentTemplate.setCodeTextArea(
                        "/*  Request Editor Focus  */\n\n"
                        + "if (jComboBox1.getEditor() != null) {\n"
                        + "    jComboBox1.getEditor().getEditorComponent().requestFocus();\n"
                        + "}\n"
                );
            }
        });

        //Select All Editor
        jButton1.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jComboBox1.getEditor() != null) {
                    jComboBox1.getEditor().selectAll();
                }
                componentTemplate.setCodeTextArea(
                        "/*  Select All Editor  */\n\n"
                        + "if (jComboBox1.getEditor() != null) {\n"
                        + "    jComboBox1.getEditor().selectAll();\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Note:\n"
                        + "    Also requests focus\n"
                        + "*/\n"
                );
            }
        });

        //Set Editor Value
        jButton3.setAction(new AbstractAction(jButton3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBox1.configureEditor(jComboBox1.getEditor(), "New Editor Value");
                componentTemplate.setCodeTextArea(
                        "/*  Set Editor Value  */\n\n"
                        + "jComboBox1.configureEditor(jComboBox1.getEditor(), \"New Editor Value\");\n"
                );
            }
        });

        //Set Add-At-End Text Editor
        jRadioButton3.setAction(new AbstractAction(jRadioButton3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton3.isSelected()) {
                    BasicComboBoxEditor bce = new BasicComboBoxEditor();
                    bce.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            jComboBox1.addItem(bce.getItem());
                        }
                    });
                    jComboBox1.setEditor(bce);
                } else {
                    ComboBoxUI tempUI = jComboBox1.getUI();
                    boolean isEditable = jComboBox1.isEditable();
                    jComboBox1.setEditable(false);
                    jComboBox1.setEditor(null);
                    jComboBox1.setUI(tempUI);
                    jComboBox1.setEditable(isEditable);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Add-At-End Text Editor  */\n\n"
                        + "BasicComboBoxEditor bce = new BasicComboBoxEditor();\n"
                        + "bce.addActionListener(new ActionListener() {\n"
                        + "    @Override\n"
                        + "    public void actionPerformed(ActionEvent e) {\n"
                        + "        jComboBox1.addItem(bce.getItem());\n"
                        + "    }\n"
                        + "});\n"
                        + "jComboBox1.setEditor(bce);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    ComboBoxUI tempUI = jComboBox1.getUI();\n"
                        + "    boolean isEditable = jComboBox1.isEditable();\n"
                        + "    jComboBox1.setEditable(false);\n"
                        + "    jComboBox1.setEditor(null);\n"
                        + "    jComboBox1.setUI(tempUI);\n"
                        + "    jComboBox1.setEditable(isEditable);\n"
                        + "*/\n"
                );
            }
        });

        //Set Color Chooser Button Editor
        jRadioButton4.setAction(new AbstractAction(jRadioButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton4.isSelected()) {
                    BasicComboBoxEditor bce = new BasicComboBoxEditor() {
                        JButton button = null;

                        @Override
                        public Component getEditorComponent() {
                            if (button == null) {
                                button = new JButton("Pick Color");
                                button.addActionListener(new ActionListener() {
                                    @Override
                                    public void actionPerformed(ActionEvent e) {
                                        Color color = JColorChooser.showDialog(jComboBox1, "Pick Color", Color.WHITE);
                                        if (color != null) {
                                            jComboBox1.addItem(color.toString());
                                        }
                                    }
                                });
                            }
                            return button;
                        }
                    };
                    jComboBox1.setEditor(bce);
                } else {
                    ComboBoxUI tempUI = jComboBox1.getUI();
                    boolean isEditable = jComboBox1.isEditable();
                    jComboBox1.setEditable(false);
                    jComboBox1.setEditor(null);
                    jComboBox1.setUI(tempUI);
                    jComboBox1.setEditable(isEditable);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Color Chooser Button Editor  */\n\n"
                        + "BasicComboBoxEditor bce = new BasicComboBoxEditor() {\n"
                        + "    JButton button = null;\n"
                        + "\n"
                        + "    @Override\n"
                        + "    public Component getEditorComponent() {\n"
                        + "        if (button == null) {\n"
                        + "            button = new JButton(\"Pick Color\");\n"
                        + "            button.addActionListener(new ActionListener() {\n"
                        + "                @Override\n"
                        + "                public void actionPerformed(ActionEvent e) {\n"
                        + "                    Color color = JColorChooser.showDialog(jComboBox1, \"Pick Color\", Color.WHITE);\n"
                        + "                    if (color != null) {\n"
                        + "                        jComboBox1.addItem(color.toString());\n"
                        + "                    }\n"
                        + "                }\n"
                        + "            });\n"
                        + "        }\n"
                        + "        return button;\n"
                        + "    }\n"
                        + "};\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    ComboBoxUI tempUI = jComboBox1.getUI();\n"
                        + "    boolean isEditable = jComboBox1.isEditable();\n"
                        + "    jComboBox1.setEditable(false);\n"
                        + "    jComboBox1.setEditor(null);\n"
                        + "    jComboBox1.setUI(tempUI);\n"
                        + "    jComboBox1.setEditable(isEditable);\n"
                        + "*/\n"
                );
            }
        });
    }
}
