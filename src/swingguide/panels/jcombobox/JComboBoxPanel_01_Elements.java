/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jcombobox;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

/**
 *
 * @author Light
 */
public class JComboBoxPanel_01_Elements extends ComponentPanel {

    private int itemCounter = 0;
    
    private JComboBox jComboBox1;
    private JComboBoxPanel jComboBoxPanel;
    
    /**
     * Creates new form NewJPanel
     */
    public JComboBoxPanel_01_Elements() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton17.setText("Insert Element");

        jButton18.setText("Remove Selected Element");

        jButton19.setText("Remove All Elements");

        jButton1.setText("Add Element Collection");

        jButton7.setText("Replace Selected Element");

        jButton16.setText("Add Element");

        jLabel1.setText("Item Count: 0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton16)
                            .addComponent(jButton17)
                            .addComponent(jButton19)
                            .addComponent(jButton18))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton7)
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton17)
                .addGap(18, 18, 18)
                .addComponent(jButton7)
                .addGap(22, 22, 22)
                .addComponent(jButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private String getNextItemPrefix(){
        String prefix = "";
        int tempCounter = itemCounter;
        do{
            int temp = tempCounter % 26;
            tempCounter = (tempCounter-temp)/26;
            if(temp >= 0){
                prefix = ((char)(temp+65))+prefix; 
            }
        }while(tempCounter > 0);
        itemCounter++;
        return prefix+" - ";
    }
    
    @Override
    public String getTitle() {
        return "Elements";
    }
    
    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
        
        jComboBox1 = (JComboBox)primaryComponent;
        jComboBoxPanel = (JComboBoxPanel)componentTemplate;

        //Add Item
        jButton16.setAction(new AbstractAction(jButton16.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBox1.addItem(getNextItemPrefix() + "New Item");
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Add Item  */\n\n"
                        + "jComboBox1.addItem(\"New Item\");\n"
                );
            }
        });

        //Add Collection of Items
        jButton1.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                ArrayList<String> list = new ArrayList<>();
                list.add(getNextItemPrefix() + "New Item Collection (1 of 3)");
                list.add(getNextItemPrefix() + "New Item Collection (2 of 3)");
                list.add(getNextItemPrefix() + "New Item Collection (3 of 3)");
                ((DefaultComboBoxModel) jComboBox1.getModel()).addAll(list);
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Add Collection of Items  */\n\n"
                        + "ArrayList<String> list = new ArrayList<>();\n"
                        + "list.add(\"New Item Collection (1 of 3)\");\n"
                        + "list.add(\"New Item Collection (2 of 3)\");\n"
                        + "list.add(\"New Item Collection (3 of 3)\");\n"
                        + "((DefaultComboBoxModel) jComboBox1.getModel()).addAll(list);\n"
                );
            }
        });

        //Insert Item
        jButton17.setAction(new AbstractAction(jButton17.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = jComboBox1.getSelectedIndex();
                if (index >= 0) {
                    jComboBox1.insertItemAt(getNextItemPrefix() + "Inserted Item", index);
                }
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Insert Item  */\n\n"
                        + "int index = jComboBox1.getSelectedIndex();\n"
                        + "if (index >= 0) {\n"
                        + "    jComboBox1.insertItemAt(\"Inserted Item\", index);\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Note:\n"
                        + "    index must be >= 0 and <= ItemCount\n"
                        + "*/\n"
                );
            }
        });

        //Replace Item
        jButton7.setAction(new AbstractAction(jButton7.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = jComboBox1.getSelectedIndex();
                if (index >= 0) {
                    jComboBox1.removeItemAt(index);
                    jComboBox1.insertItemAt(getNextItemPrefix() + " Replaced Item", index);
                }
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Replace Item  */\n\n"
                        + "int index = jComboBox1.getSelectedIndex();\n"
                        + "if (index >= 0) {\n"
                        + "    jComboBox1.removeItemAt(index);\n"
                        + "    jComboBox1.insertItemAt(\"Replaced Item\", index);\n"
                        + "}\n"
                );
            }
        });

        //Remove Item
        jButton18.setAction(new AbstractAction(jButton18.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int index = jComboBox1.getSelectedIndex();
                if (index >= 0) {
                    jComboBox1.removeItemAt(index);
                }
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Remove Item  */\n\n"
                        + "int index = jComboBox1.getSelectedIndex();\n"
                        + "if (index >= 0) {\n"
                        + "    jComboBox1.removeItemAt(index);\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Note:\n"
                        + "    index must be >= 0 and < ItemCount\n"
                        + "*/\n"
                );
            }
        });

        //Remove All Items
        jButton19.setAction(new AbstractAction(jButton19.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jComboBox1.removeAllItems();
                jLabel1.setText("Item Count: " + jComboBox1.getItemCount());
                componentTemplate.setCodeTextArea(
                        "/*  Remove All Items  */\n\n"
                        + "jComboBox1.removeAllItems();\n"
                );
            }
        });

        //Item Count
        jLabel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Item Count  */\n\n"
                        + "System.out.println(\"Item Count: \"+jComboBox1.getItemCount());\n"
                );
            }
        });
        
//        //Add Element
//        jButton16.setAction(new AbstractAction(jButton16.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                jComboBox.addItem(getNextItemPrefix()+"New Item");
//                jComboBoxPanel.setCodeTextArea("/*  "+jButton16.getText()+"  */\n\n"
//                        + "jComboBox1.addItem(\"New Item\");");
//                jLabel1.setText("Item Count: "+jComboBox.getItemCount());
//            }
//        });
//
//        //Add Element Collection
//        jButton1.setAction(new AbstractAction(jButton1.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//ArrayList<String> list = new ArrayList<>();
//list.add(getNextItemPrefix() + "new item collection (1 of 3)");
//list.add(getNextItemPrefix() + "new item collection (2 of 3)");
//list.add(getNextItemPrefix() + "new item collection (3 of 3)");
//((DefaultComboBoxModel) jComboBox.getModel()).addAll(list);
//jLabel1.setText("Item Count: "+jComboBox.getItemCount());
//                jComboBoxPanel.setCodeTextArea("/*  " + jButton1.getText() + "  */\n\n"
//                        + "ArrayList<String> list = new ArrayList<>();\n"
//                        + "list.add(getNextItemPrefix()+\"new item collection (1 of 3)\");\n"
//                        + "list.add(getNextItemPrefix()+\"new item collection (2 of 3)\");\n"
//                        + "list.add(getNextItemPrefix()+\"new item collection (3 of 3)\");\n"
//                        + "((DefaultComboBoxModel)jComboBox1.getModel()).addAll(list);");
//            }
//        });
//        
//        //Insert Element after Selected Element
//        jButton17.setAction(new AbstractAction(jButton17.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//int index = jComboBox.getSelectedIndex();
//jComboBox.insertItemAt(getNextItemPrefix() + "inserted item", (index + 1));
//jComboBox.setSelectedIndex(index + 1);
//jLabel1.setText("Item Count: "+jComboBox.getItemCount());
//                jComboBoxPanel.setCodeTextArea("/*  " + jButton17.getText() + "  */\n\n"
//                        + "int index = jComboBox1.getSelectedIndex();\n"
//                        + "jComboBox1.insertItemAt(\"inserted item\",(index+1));\n"
//                        + "jComboBox1.setSelectedIndex(index+1);");
//            }
//        });
//  
//        //Replace Selected Value
//        jButton7.setAction(new AbstractAction(jButton7.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//int index = jComboBox.getSelectedIndex();
//if (index >= 0) {
//    jComboBox.removeItemAt(index);
//    jComboBox.insertItemAt(getNextItemPrefix() + " Replaced", index);
//    jComboBox.setSelectedIndex(index);
//}
//                jComboBoxPanel.setCodeTextArea("/*  " + jButton7.getText() + "  */\n\n"
//                        + "int index = jComboBox1.getSelectedIndex();\n"
//                        + "if (index >= 0) {\n"
//                        + "    jComboBox1.removeItemAt(index);\n"
//                        + "    jComboBox1.insertItemAt(getNextItemPrefix() + \" Replaced\", index);\n"
//                        + "    jComboBox1.setSelectedIndex(index);\n"
//                        + "}");
//            }
//        });
//
//        //Remove Selected Element
//        jButton18.setAction(new AbstractAction(jButton18.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//int index = jComboBox.getSelectedIndex();
//if (index > 0) {
//    jComboBox.removeItemAt(index);
//    jLabel1.setText("Item Count: "+jComboBox.getItemCount());
//}
//                jComboBoxPanel.setCodeTextArea("/*  " + jButton18.getText() + "  */\n\n"
//                        + "int index = jComboBox1.getSelectedIndex();\n"
//                        + "if (index > 0) {\n"
//                        + "    jComboBox1.removeItemAt(index);\n"
//                        + "}");
//            }
//        });
//
//        //Remove All Elements
//        jButton19.setAction(new AbstractAction(jButton19.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//jComboBox.removeAllItems();
//jLabel1.setText("Item Count: "+jComboBox.getItemCount());
//System.out.println("Item Count: "+jComboBox.getItemCount());
//                jComboBoxPanel.setCodeTextArea("/*  "+jButton19.getText()+"  */\n\n"
//                        + "jComboBox1.removeAllItems();");
//            }
//        });
    }
}
