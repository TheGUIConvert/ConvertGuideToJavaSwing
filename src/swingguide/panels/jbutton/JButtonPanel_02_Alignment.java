/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jbutton;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.SwingConstants;

/**
 *
 * @author Light
 */
public class JButtonPanel_02_Alignment extends ComponentPanel {

    JButton jButton1;
    JButtonPanel jButtonPanel;
    
    /**
     * Creates new form NewJPanel1
     */
    public JButtonPanel_02_Alignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jButton7.setText("Change Vertical Allignment");

        jLabel4.setText("CENTER");

        jLabel3.setText("TRAILING");

        jLabel2.setText("CENTER");

        jLabel1.setText("CENTER");

        jButton10.setText("Change Text Relative to Icon - Horizontal");

        jButton9.setText("Change Horizontal Allignment");

        jButton8.setText("Change Text Relative to Icon - Vertical");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jLabel4))
                .addContainerGap(179, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String getTitle() {
        return "Alignment";
    }

    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {

        jButton1 = (JButton)primaryComponent;
        jButtonPanel = (JButtonPanel)componentTemplate;

        //Change Text and Icon Alignment - HORIZONTAL
        jButton9.setAction(new AbstractAction(jButton9.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jButton1.getHorizontalAlignment() == SwingConstants.LEFT) {
                    jButton1.setHorizontalAlignment(SwingConstants.LEADING);
                    jLabel1.setText("LEADING");
                } else if (jButton1.getHorizontalAlignment() == SwingConstants.LEADING) {
                    jButton1.setHorizontalAlignment(SwingConstants.CENTER);
                    jLabel1.setText("CENTER");
                } else if (jButton1.getHorizontalAlignment() == SwingConstants.CENTER) {
                    jButton1.setHorizontalAlignment(SwingConstants.RIGHT);
                    jLabel1.setText("RIGHT");
                } else if (jButton1.getHorizontalAlignment() == SwingConstants.RIGHT) {
                    jButton1.setHorizontalAlignment(SwingConstants.TRAILING);
                    jLabel1.setText("TRAILING");
                } else if (jButton1.getHorizontalAlignment() == SwingConstants.TRAILING) {
                    jButton1.setHorizontalAlignment(SwingConstants.LEFT);
                    jLabel1.setText("LEFT");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text and Icon Alignment - HORIZONTAL  */\n\n"
                        + "jButton1.setHorizontalAlignment(SwingConstants.RIGHT);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Shifts the text and icon's horizontal location around the available JButton width\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jButton1.setHorizontalAlignment(SwingConstants.CENTER);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.LEADING (10)\n"
                        + "    SwingConstants.LEFT (2)\n"
                        + "    SwingConstants.CENTER (0) - default\n"
                        + "    SwingConstants.RIGHT (4)\n"
                        + "    SwingConstants.TRAILING (11)\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Change Text and Icon Alignment - VERTICAL
        jButton7.setAction(new AbstractAction(jButton7.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jButton1.getVerticalAlignment() == SwingConstants.TOP) {
                    jButton1.setVerticalAlignment(SwingConstants.CENTER);
                    jLabel2.setText("CENTER");
                } else if (jButton1.getVerticalAlignment() == SwingConstants.CENTER) {
                    jButton1.setVerticalAlignment(SwingConstants.BOTTOM);
                    jLabel2.setText("BOTTOM");
                } else if (jButton1.getVerticalAlignment() == SwingConstants.BOTTOM) {
                    jButton1.setVerticalAlignment(SwingConstants.TOP);
                    jLabel2.setText("TOP");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text and Icon Alignment - VERTICAL  */\n\n"
                        + "jButton1.setVerticalAlignment(SwingConstants.BOTTOM);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Shifts the text and icon's vertical location around the available JButton height\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jButton1.setVerticalAlignment(SwingConstants.CENTER);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.TOP (1)\n"
                        + "    SwingConstants.CENTER (0) - default\n"
                        + "    SwingConstants.BOTTOM (3)\n"
                        + "*/\n"
                );
            }
        });

        //Change Text Position Relative to Icon - HORIZONTAL
        jButton10.setAction(new AbstractAction(jButton10.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jButton1.getHorizontalTextPosition() == SwingConstants.LEFT) {
                    jButton1.setHorizontalTextPosition(SwingConstants.LEADING);
                    jLabel3.setText("LEADING");
                } else if (jButton1.getHorizontalTextPosition() == SwingConstants.LEADING) {
                    jButton1.setHorizontalTextPosition(SwingConstants.CENTER);
                    jLabel3.setText("CENTER");
                } else if (jButton1.getHorizontalTextPosition() == SwingConstants.CENTER) {
                    jButton1.setHorizontalTextPosition(SwingConstants.RIGHT);
                    jLabel3.setText("RIGHT");
                } else if (jButton1.getHorizontalTextPosition() == SwingConstants.RIGHT) {
                    jButton1.setHorizontalTextPosition(SwingConstants.TRAILING);
                    jLabel3.setText("TRAILING");
                } else if (jButton1.getHorizontalTextPosition() == SwingConstants.TRAILING) {
                    jButton1.setHorizontalTextPosition(SwingConstants.LEFT);
                    jLabel3.setText("LEFT");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text Position Relative to Icon - HORIZONTAL  */\n\n"
                        + "jButton1.setHorizontalTextPosition(SwingConstants.RIGHT);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setHorizontalTextPosition(SwingConstants.TRAILING);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.LEADING (10)\n"
                        + "    SwingConstants.LEFT (2)\n"
                        + "    SwingConstants.CENTER (0)\n"
                        + "    SwingConstants.RIGHT (4)\n"
                        + "    SwingConstants.TRAILING (11) - default\n"
                        + "*/\n"
                );
            }
        });

        //Change Text Position Relative to Icon - VERTICAL
        jButton8.setAction(new AbstractAction(jButton8.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jButton1.getVerticalTextPosition() == SwingConstants.TOP) {
                    jButton1.setVerticalTextPosition(SwingConstants.CENTER);
                    jLabel4.setText("CENTER");
                } else if (jButton1.getVerticalTextPosition() == SwingConstants.CENTER) {
                    jButton1.setVerticalTextPosition(SwingConstants.BOTTOM);
                    jLabel4.setText("BOTTOM");
                } else if (jButton1.getVerticalTextPosition() == SwingConstants.BOTTOM) {
                    jButton1.setVerticalTextPosition(SwingConstants.TOP);
                    jLabel4.setText("TOP");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text Position Relative to Icon - VERTICAL  */\n\n"
                        + "jButton1.setVerticalTextPosition(SwingConstants.BOTTOM);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setVerticalAlignment(SwingConstants.CENTER);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.TOP (1)\n"
                        + "    SwingConstants.CENTER (0) - default\n"
                        + "    SwingConstants.BOTTOM (3)\n"
                        + "*/\n"
                );
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
