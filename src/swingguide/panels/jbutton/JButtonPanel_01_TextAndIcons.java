/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jbutton;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author Light
 */
public class JButtonPanel_01_TextAndIcons extends ComponentPanel {

    JButton jButton1;
    JButtonPanel jButtonPanel;
    
    /**
     * Creates new form NewJPanel
     */
    public JButtonPanel_01_TextAndIcons() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jCheckBox12.setText("Icon (selected disabled)");

        jCheckBox11.setText("Icon (selected rollover)");

        jCheckBox10.setText("Icon (selected)");

        jCheckBox9.setText("Icon (disabled)");

        jCheckBox8.setText("Icon (rollover)");

        jCheckBox7.setText("Icon (pressed)");

        jCheckBox6.setText("Icon (primary)");

        jButton6.setText("Set Text (HTML)");

        jButton5.setText("Set Text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox12)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox9)
                    .addComponent(jCheckBox6)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8))
                .addContainerGap(251, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox12)
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String getTitle() {
        return "Text And Icons";
    }

    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
    
        jButton1 = (JButton)primaryComponent;
        jButtonPanel = (JButtonPanel)componentTemplate;
        
        //Set Text
        jButton5.setAction(new AbstractAction(jButton5.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButton1.setText("The new text");

                componentTemplate.setCodeTextArea(
                        "/*  Set Text  */\n\n"
                        + "jButton1.setText(\"The new text\");\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setText(\"\");\n"
                        + "*/\n"
                );
            }
        });

        //Set Text (HTML)
        jButton6.setAction(new AbstractAction(jButton6.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButton1.setText("<html><font color=#8080ff>The new</font>&nbsp;&nbsp;<b>HTML</b><br>text");

                componentTemplate.setCodeTextArea(
                        "/*  Set Text (HTML)  */\n\n"
                        + "jButton1.setText(\"<html><font color=#8080ff>The new</font>&nbsp;&nbsp;<b>HTML</b><br>text\");\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setText(\"\");\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The available HTML tags and attributes, for use in Swing, are listed in javax.swing.text.html.HTML\n"
                        + "*/\n"
                );
            }
        });

        //Set Icon
        jCheckBox6.setAction(new AbstractAction(jCheckBox6.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox6.isSelected()) {
                    jButton1.setIcon(new ImageIcon(getClass().getResource("/images/icon_primary.png")));
                } else {
                    jButton1.setIcon(null);
                }

                componentTemplate.setCodeTextArea(
                        "/*  Set Icon  */\n\n"
                        + "jButton1.setIcon(new ImageIcon(getClass().getResource(\"/icon.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Pressed Icon
        jCheckBox7.setAction(new AbstractAction(jCheckBox7.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox7.isSelected()) {
                    jButton1.setPressedIcon(new ImageIcon(getClass().getResource("/images/icon_pressed.png")));
                } else {
                    jButton1.setPressedIcon(null);
                }

                componentTemplate.setCodeTextArea(
                        "/*  Set Pressed Icon  */\n\n"
                        + "jButton1.setPressedIcon(new ImageIcon(getClass().getResource(\"/icon_pressed.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setPressedIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setPressedIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setPressedIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Rollover Icon
        jCheckBox8.setAction(new AbstractAction(jCheckBox8.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox8.isSelected()) {
                    jButton1.setRolloverIcon(new ImageIcon(getClass().getResource("/images/icon_rollover.png")));
                } else {
                    jButton1.setRolloverIcon(null);
                }

                componentTemplate.setCodeTextArea(
                        "/*  Set Rollover Icon  */\n\n"
                        + "jButton1.setRolloverIcon(new ImageIcon(getClass().getResource(\"/icon_rollover.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setRolloverIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setRolloverIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setRolloverIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Disabled Icon
        jCheckBox9.setAction(new AbstractAction(jCheckBox9.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox9.isSelected()) {
                    jButton1.setDisabledIcon(new ImageIcon(getClass().getResource("/images/icon_disable.png")));
                } else {
                    jButton1.setDisabledIcon(null);
                }

                componentTemplate.setCodeTextArea(
                        "/*  Set Disabled Icon  */\n\n"
                        + "jButton1.setDisabledIcon(new ImageIcon(getClass().getResource(\"/icon_disable.png\")));\\n\\n\\n\"\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setDisabledIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setDisabledIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setDisabledIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Selected Icon
        jCheckBox10.setAction(new AbstractAction(jCheckBox10.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox10.isSelected()) {
                    jButton1.setSelectedIcon(new ImageIcon(getClass().getResource("/images/icon_select.png")));
                } else {
                    jButton1.setSelectedIcon(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Selected Icon  */\n\n"
                        + "jButton1.setSelectedIcon(new ImageIcon(getClass().getResource(\"/icon_select.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setSelectedIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setSelectedIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setSelectedIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Selected Rollover Icon
        jCheckBox11.setAction(new AbstractAction(jCheckBox11.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox11.isSelected()) {
                    jButton1.setRolloverSelectedIcon(new ImageIcon(getClass().getResource("/images/icon_select_rollover.png")));
                } else {
                    jButton1.setRolloverSelectedIcon(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Selected Rollover Icon  */\n\n"
                        + "jButton1.setRolloverSelectedIcon(new ImageIcon(getClass().getResource(\"/icon_select_rollover.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setRolloverSelectedIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setRolloverSelectedIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setRolloverSelectedIcon(icon);\n"
                        + "*/\n"
                );
            }
        });

        //Set Selected Disabled Icon
        jCheckBox12.setAction(new AbstractAction(jCheckBox12.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox12.isSelected()) {
                    jButton1.setDisabledSelectedIcon(new ImageIcon(getClass().getResource("/images/icon_select_disable.png")));
                } else {
                    jButton1.setDisabledSelectedIcon(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Selected Disabled Icon  */\n\n"
                        + "jButton1.setDisabledSelectedIcon(new ImageIcon(getClass().getResource(\"/icon_select_disable.png\")));\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setDisabledSelectedIcon(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    The code above works for .jpg, .gif, or .png files, for .bmp or .tif use:\n"
                        + "        try {\n"
                        + "            ImageIcon icon = new ImageIcon(ImageIO.read(getClass().getResource(\"/icon.bmp\")));\n"
                        + "            jButton1.setDisabledSelectedIcon(icon);\n"
                        + "        } catch (IOException ex) {\n"
                        + "        }\n"
                        + "\n"
                        + "    The resource path starting with a / lets the file be found at:\n"
                        + "        \"src/main/resources/\" for Maven\n"
                        + "        \"src/\" for Ant\n"
                        + "\n"
                        + "    To load a local image file:\n"
                        + "        icon = new ImageIcon(new URL(\"file:c:\\\\users\\\\myaccount\\\\pictures\\\\icon.jpg\"));\n"
                        + "        jButton1.setDisabledSelectedIcon(icon);\n"
                        + "*/\n"
                );
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    // End of variables declaration//GEN-END:variables
}
