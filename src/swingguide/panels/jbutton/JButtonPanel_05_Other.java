/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jbutton;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.DefaultButtonModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Light
 */
public class JButtonPanel_05_Other extends ComponentPanel {

    JButton jButton1;
    JButtonPanel jButtonPanel;
    
    /**
     * Creates new form NewJPanel4
     */
    public JButtonPanel_05_Other() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox27 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox34 = new javax.swing.JCheckBox();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox33 = new javax.swing.JCheckBox();
        jCheckBox32 = new javax.swing.JCheckBox();
        jCheckBox30 = new javax.swing.JCheckBox();
        jCheckBox29 = new javax.swing.JCheckBox();
        jCheckBox28 = new javax.swing.JCheckBox();

        jCheckBox27.setText("Set Action Command Text");

        jCheckBox26.setText("Set Action (and other values)");

        jButton4.setText("Print if Button is the Default");

        jButton2.setText("Set New Model");

        jButton3.setText("Do Click");

        jCheckBox34.setText("Set Button Group");

        jCheckBox31.setText("Set Displayed Mnemonic to index 1");

        jCheckBox33.setText("Set Mnemonic to Alt+R");

        jCheckBox32.setText("Disable Default Capable");

        jCheckBox30.setText("Set Default Button of the RootPane");

        jCheckBox29.setText("Change Multi-Click Threshhold");

        jCheckBox28.setText("Hide the Text of the Action");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCheckBox29)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(jCheckBox26)
                            .addComponent(jCheckBox27)
                            .addComponent(jCheckBox28)
                            .addComponent(jCheckBox30)
                            .addComponent(jCheckBox32)
                            .addComponent(jCheckBox33)
                            .addComponent(jCheckBox31)
                            .addComponent(jCheckBox34))
                        .addContainerGap(193, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox28)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox29)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox32)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox31)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(192, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String getTitle() {
        return "Other";
    }

    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {

        jButton1 = (JButton)primaryComponent;
        jButtonPanel = (JButtonPanel)componentTemplate;
        
        //Set Action (and other values)
        jCheckBox26.setAction(new AbstractAction(jCheckBox26.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox26.isSelected()) {
                    Action action = new AbstractAction() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            componentTemplate.addTextToTextArea("The New Action ");
                        }
                    };
                    ImageIcon icon = new ImageIcon(getClass().getResource("/images/icon_new_icon.png"));
                    action.putValue(Action.LARGE_ICON_KEY, icon);
                    action.putValue(Action.NAME, "The New Action");
                    action.putValue(Action.ACTION_COMMAND_KEY, "Action Command from Action");
                    action.setEnabled(true);
                    jButton1.setAction(action);
                } else {
                    jButton1.setAction(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Action (and other values)  */\n\n"
                        + "Action action = new AbstractAction(){\n"
                        + "    @Override\n"
                        + "    public void actionPerformed(ActionEvent e) {\n"
                        + "        componentTemplate.addTextToTextArea(\"The New Action \");\n"
                        + "    }\n"
                        + "};\n"
                        + "ImageIcon icon = new ImageIcon(getClass().getResource(\"/new_icon.png\"));\n"
                        + "action.putValue(Action.LARGE_ICON_KEY, icon);\n"
                        + "action.putValue(Action.NAME, \"The New Action\");\n"
                        + "action.putValue(Action.ACTION_COMMAND_KEY, \"Action Command from Action\");\n"
                        + "action.setEnabled(true);\n"
                        + "jButton1.setAction(action);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setAction(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    This method can be used to set these values of a JButton:\n"
                        + "        Action.NAME - sets the text\n"
                        + "        Action.SHORT_DESCRIPTION - tooltip\n"
                        + "        Action.ACTION_COMMAND_KEY\n"
                        + "        Action.MNEMONIC_KEY\n"
                        + "        Action.DISPLAYED_MNEMONIC_INDEX_KEY\n"
                        + "        Action.LARGE_ICON_KEY - primary icon\n"
                        + "        also, can set the Enabled state\n"
                        + "*/\n"
                );
            }
        });

        //Set Action Command Text
        jCheckBox27.setAction(new AbstractAction(jCheckBox27.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox27.isSelected()) {
                    jButton1.setActionCommand("The New Action Command Text");
                } else {
                    jButton1.setActionCommand(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Action Command Text  */\n\n"
                        + "jButton1.setActionCommand(\"The New Action Command Text\");\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setActionCommand(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Sets the text that is passed to the Action Event when the Button is Clicked.\n"
                        + "*/\n"
                );
            }
        });

        //Hide the Text of the Action
        jCheckBox28.setAction(new AbstractAction(jCheckBox28.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox28.isSelected()) {
                    jButton1.setHideActionText(true);
                } else {
                    jButton1.setHideActionText(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Hide the Text of the Action  */\n\n"
                        + "jButton1.setHideActionText(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setHideActionText(false);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Hide the Button text that was set specifically from the Action.\n"
                        + "*/\n"
                );
            }
        });

        //Do Click
        jButton3.setAction(new AbstractAction(jButton3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButton1.doClick();
                componentTemplate.setCodeTextArea(
                        "/*  Do Click  */\n\n"
                        + "jButton1.doClick();\n"
                );
            }
        });

        //Change Multi-Click Threshhold
        jCheckBox29.setAction(new AbstractAction(jCheckBox29.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox29.isSelected()) {
                    jButton1.setMultiClickThreshhold(2000);
                } else {
                    jButton1.setMultiClickThreshhold(0);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Multi-Click Threshhold  */\n\n"
                        + "jButton1.setMultiClickThreshhold(2000);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setMultiClickThreshhold(0);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Ignore any manual mouse clicks that happen that are less than the number of milliseconds (e.g. 2000ms) since the last mouse click\n"
                        + "*/\n"
                );
            }
        });

        //Set Default Button of the RootPane
        jCheckBox30.setAction(new AbstractAction(jCheckBox30.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox30.isSelected()) {
                    JRootPane root = SwingUtilities.getRootPane(jButton1);
                    if (root != null) {
                        root.setDefaultButton(jButton1);
                    }
                } else {
                    JRootPane root = SwingUtilities.getRootPane(jButton1);
                    if (root != null) {
                        root.setDefaultButton(null);
                    }
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Default Button of the RootPane  */\n\n"
                        + "JRootPane root = SwingUtilities.getRootPane(jButton1);\n"
                        + "if(root != null){\n"
                        + "    root.setDefaultButton(jButton1);\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    JRootPane root = SwingUtilities.getRootPane(jButton1);\n"
                        + "    if(root != null){\n"
                        + "        root.setDefaultButton(null);\n"
                        + "    }\n"
                        + "*/\n"
                );
            }
        });

        //Print if Button is the Default
        jButton4.setAction(new AbstractAction(jButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                componentTemplate.addTextToTextArea("Is button the Default Button: " + jButton1.isDefaultButton() + "\n\n");
                componentTemplate.setCodeTextArea(
                        "/*  Print if Button is the Default  */\n\n"
                        + "System.out.println(\"Is button the Default Button: \"+jButton1.isDefaultButton());\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Whether or not this JButton will get the default focus if the parent component gets focus\n"
                        + "*/\n"
                );
            }
        });

        //Disable Default Capable
        jCheckBox32.setAction(new AbstractAction(jCheckBox32.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox32.isSelected()) {
                    jButton1.setDefaultCapable(false);
                } else {
                    jButton1.setDefaultCapable(true);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Disable Default Capable  */\n\n"
                        + "jButton1.setDefaultCapable(false);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setDefaultCapable(true);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    This flag is checked when the button gains focus\n"
                        + "*/\n"
                );
            }
        });

        //Set Mnemonic
        jCheckBox33.setAction(new AbstractAction(jCheckBox33.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox33.isSelected()) {
                    jButton1.setMnemonic('R');
                } else {
                    jButton1.setMnemonic(-1);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Mnemonic  */\n\n"
                        + "jButton1.setMnemonic('R');\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Assigning the character 'R', for example, requires typing Alt+R to perform a click on this JButton\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jButton1.setMnemonic(-1);\n"
                        + "\n"
                        + "Note:\n"
                        + "    This also resets the Displayed Mnemonic Index\n"
                        + "*/\n"
                );
            }
        });

        //Set Displayed Mnemonic
        jCheckBox31.setAction(new AbstractAction(jCheckBox31.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox31.isSelected()) {
                    int index = 1;
                    if (jButton1.getText() != null && jButton1.getText().length() >= (index + 1)) {
                        jButton1.setDisplayedMnemonicIndex(index);
                    }
                } else {
                    jButton1.setDisplayedMnemonicIndex(-1);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Displayed Mnemonic  */\n\n"
                        + "int index = 1;\n"
                        + "if(jButton1.getText() != null && jButton1.getText().length() >= (index+1)){\n"
                        + "    jButton1.setDisplayedMnemonicIndex(index);\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Places an underscore on the text character at the index\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jButton1.setDisplayedMnemonicIndex(-1);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Doesn't show up when the JButton is using HTML text\n"
                        + "    The provided index must be less than the text length\n"
                        + "*/\n"
                );
            }
        });

        //Set Button Group
        jCheckBox34.setAction(new AbstractAction(jCheckBox34.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox34.isSelected()) {
                    ((DefaultButtonModel) jButton1.getModel()).setGroup(new ButtonGroup());
                } else {
                    ((DefaultButtonModel) jButton1.getModel()).setGroup(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Button Group  */\n\n"
                        + "((DefaultButtonModel)jButton1.getModel()).setGroup(new ButtonGroup());\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    ((DefaultButtonModel)jButton1.getModel()).setGroup(null);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Not useful for non-toggle buttons (like this one)\n"
                        + "*/\n"
                );
            }
        });

        //Set New Model
        jButton2.setAction(new AbstractAction(jButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButton1.setModel(new DefaultButtonModel());
                componentTemplate.setCodeTextArea(
                        "/*  Set New Model  */\n\n"
                        + "jButton1.setModel(new DefaultButtonModel());\n"
                );
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox29;
    private javax.swing.JCheckBox jCheckBox30;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox32;
    private javax.swing.JCheckBox jCheckBox33;
    private javax.swing.JCheckBox jCheckBox34;
    // End of variables declaration//GEN-END:variables
}
