/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jbutton;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.JButton;

/**
 *
 * @author Light
 */
public class JButtonPanel_03_State extends ComponentPanel {

    JButton jButton1;
    JButtonPanel jButtonPanel;
    
    /**
     * Creates new form NewJPanel2
     */
    public JButtonPanel_03_State() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Button Model State"));

        jCheckBox1.setText("is Armed");

        jCheckBox2.setText("is Selected");

        jCheckBox3.setText("is Enabled");

        jCheckBox4.setText("is Pressed");

        jCheckBox5.setText("is Roll-overed");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBox13.setText("Enable Rollover");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox13)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(248, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox13)
                .addContainerGap(97, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public String getTitle() {
        return "State";
    }

    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {

        jButton1 = (JButton)primaryComponent;
        jButtonPanel = (JButtonPanel)componentTemplate;
        
        //Arm the Button
        jCheckBox1.setAction(new AbstractAction(jCheckBox1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox1.isSelected()) {
                    jButton1.getModel().setArmed(true);
                } else {
                    jButton1.getModel().setArmed(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Arm the Button  */\n\n"
                        + "jButton1.getModel().setArmed(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Primes the button for a click (and I don't know what that means).\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jButton1.getModel().setArmed(false);\n"
                        + "*/\n"
                );
            }
        });

        //Select the Button
        jCheckBox2.setAction(new AbstractAction(jCheckBox2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox2.isSelected()) {
                    jButton1.getModel().setSelected(true);
                } else {
                    jButton1.getModel().setSelected(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Select the Button  */\n\n"
                        + "jButton1.getModel().setSelected(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.getModel().setSelected(false);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Doesn't do much for JButton ... see JToggleButton\n"
                        + "\n"
                        + "    Can also use:\n"
                        + "        jButton1.setSelected\n"
                        + "*/\n"
                );
            }
        });

        //Enable the Button
        jCheckBox3.setAction(new AbstractAction(jCheckBox3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox3.isSelected()) {
                    jButton1.getModel().setEnabled(true);
                } else {
                    jButton1.getModel().setEnabled(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Enable the Button  */\n\n"
                        + "jButton1.getModel().setEnabled(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.getModel().setEnabled(true);\n"
                        + "\n"
                        + "Notes:\n"
                        + "    Can also use:\n"
                        + "        jButton1.setEnabled\n"
                        + "*/\n"
                );
            }
        });

        //Press the Button
        jCheckBox4.setAction(new AbstractAction(jCheckBox4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox4.isSelected()) {
                    jButton1.getModel().setPressed(true);
                } else {
                    jButton1.getModel().setPressed(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Press the Button  */\n\n"
                        + "jButton1.getModel().setPressed(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.getModel().setPressed(false);\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Rollover the Button
        jCheckBox5.setAction(new AbstractAction(jCheckBox5.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox5.isSelected()) {
                    jButton1.getModel().setRollover(true);
                } else {
                    jButton1.getModel().setRollover(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Rollover the Button  */\n\n"
                        + "jButton1.getModel().setRollover(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.getModel().setRollover(false);\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Enable Button Rollover
        jCheckBox13.setAction(new AbstractAction(jCheckBox13.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox13.isSelected()) {
                    jButton1.setRolloverEnabled(true);
                } else {
                    jButton1.setRolloverEnabled(false);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Enable Button Rollover  */\n\n"
                        + "jButton1.setRolloverEnabled(true);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jButton1.setRolloverEnabled(true);\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });
    }
     
    private void evaluateState() {
        jCheckBox1.setSelected(jButton1.getModel().isArmed());
        jCheckBox2.setSelected(jButton1.getModel().isSelected());
        jCheckBox3.setSelected(jButton1.getModel().isEnabled());
        jCheckBox4.setSelected(jButton1.getModel().isPressed());
        jCheckBox5.setSelected(jButton1.getModel().isRollover());
        jCheckBox13.setSelected(jButton1.isRolloverEnabled());
    }

    @Override
    public void processMessage(int message, Object parameter) {
        if (message == JButtonPanel.EVALUATE_STATE) {
            evaluateState();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JPanel jPanel7;
    // End of variables declaration//GEN-END:variables
}
