/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jlabel;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

/**
 *
 * @author Light
 */
public class JLabelPanel_02_Alignment extends ComponentPanel {

    /**
     * Creates new form NewJPanel1
     */
    public JLabelPanel_02_Alignment() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jButton4.setText("Change Vertical Alignment");

        jButton2.setText("Change Horizontal Alignment");

        jLabel5.setText("CENTER");

        jLabel4.setText("TRAILING");

        jLabel3.setText("CENTER");

        jLabel2.setText("LEADING");

        jButton6.setText("Change Text Relative to Icon - Vertical");

        jButton5.setText("Change Text Relative to Icon - Horizontal");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jLabel5))
                .addContainerGap(179, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Alignment";
    }
    
    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
        
        JLabel jLabel1 = (JLabel)primaryComponent;
   
        //Change Text and Icon Alignment - HORIZONTAL
        jButton2.setAction(new AbstractAction(jButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jLabel1.getHorizontalAlignment() == SwingConstants.LEADING) {
                    jLabel1.setHorizontalAlignment(SwingConstants.LEFT);
                    jLabel2.setText("LEFT");
                } else if (jLabel1.getHorizontalAlignment() == SwingConstants.LEFT) {
                    jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
                    jLabel2.setText("CENTER");
                } else if (jLabel1.getHorizontalAlignment() == SwingConstants.CENTER) {
                    jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);
                    jLabel2.setText("RIGHT");
                } else if (jLabel1.getHorizontalAlignment() == SwingConstants.RIGHT) {
                    jLabel1.setHorizontalAlignment(SwingConstants.TRAILING);
                    jLabel2.setText("TRAILING");
                } else if (jLabel1.getHorizontalAlignment() == SwingConstants.TRAILING) {
                    jLabel1.setHorizontalAlignment(SwingConstants.LEADING);
                    jLabel2.setText("LEADING");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text and Icon Alignment - HORIZONTAL  */\n\n"
                        + "jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Shifts the text and icon's horizontal location around the available JLabel width\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jLabel1.setHorizontalAlignment(SwingConstants.LEADING);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.LEADING (10) - default\n"
                        + "    SwingConstants.LEFT (2)\n"
                        + "    SwingConstants.CENTER (0)\n"
                        + "    SwingConstants.RIGHT (4)\n"
                        + "    SwingConstants.TRAILING (11)\n"
                        + "*/\n"
                );
            }
        });

        //Change Text and Icon Alignment - VERTICAL
        jButton4.setAction(new AbstractAction(jButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jLabel1.getVerticalAlignment() == SwingConstants.TOP) {
                    jLabel1.setVerticalAlignment(SwingConstants.CENTER);
                    jLabel3.setText("CENTER");
                } else if (jLabel1.getVerticalAlignment() == SwingConstants.CENTER) {
                    jLabel1.setVerticalAlignment(SwingConstants.BOTTOM);
                    jLabel3.setText("BOTTOM");
                } else if (jLabel1.getVerticalAlignment() == SwingConstants.BOTTOM) {
                    jLabel1.setVerticalAlignment(SwingConstants.TOP);
                    jLabel3.setText("TOP");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text and Icon Alignment - VERTICAL  */\n\n"
                        + "jLabel1.setVerticalAlignment(SwingConstants.TOP);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Shifts the text and icon's vertical location around the available JLabel height\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jLabel1.setVerticalAlignment(SwingConstants.CENTER);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.TOP (1)\n"
                        + "    SwingConstants.CENTER (0) - default\n"
                        + "    SwingConstants.BOTTOM (3)\n"
                        + "*/\n"
                );
            }
        });

        //Change Text Position Relative to Icon - HORIZONTAL
        jButton5.setAction(new AbstractAction(jButton5.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jLabel1.getHorizontalTextPosition() == SwingConstants.LEADING) {
                    jLabel1.setHorizontalTextPosition(SwingConstants.LEFT);
                    jLabel4.setText("LEFT");
                } else if (jLabel1.getHorizontalTextPosition() == SwingConstants.LEFT) {
                    jLabel1.setHorizontalTextPosition(SwingConstants.CENTER);
                    jLabel4.setText("CENTER");
                } else if (jLabel1.getHorizontalTextPosition() == SwingConstants.CENTER) {
                    jLabel1.setHorizontalTextPosition(SwingConstants.RIGHT);
                    jLabel4.setText("RIGHT");
                } else if (jLabel1.getHorizontalTextPosition() == SwingConstants.RIGHT) {
                    jLabel1.setHorizontalTextPosition(SwingConstants.TRAILING);
                    jLabel4.setText("TRAILING");
                } else if (jLabel1.getHorizontalTextPosition() == SwingConstants.TRAILING) {
                    jLabel1.setHorizontalTextPosition(SwingConstants.LEADING);
                    jLabel4.setText("LEADING");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text Position Relative to Icon - HORIZONTAL  */\n\n"
                        + "jLabel1.setHorizontalTextPosition(SwingConstants.RIGHT);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jLabel1.setHorizontalTextPosition(SwingConstants.TRAILING);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.LEADING (10)\n"
                        + "    SwingConstants.LEFT (2)\n"
                        + "    SwingConstants.CENTER (0)\n"
                        + "    SwingConstants.RIGHT (4)\n"
                        + "    SwingConstants.TRAILING (11) - default\n"
                        + "*/\n"
                );
            }
        });

        //Change Text Position Relative to Icon - VERTICAL
        jButton6.setAction(new AbstractAction(jButton6.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jLabel1.getVerticalTextPosition() == SwingConstants.TOP) {
                    jLabel1.setVerticalTextPosition(SwingConstants.CENTER);
                    jLabel5.setText("CENTER");
                } else if (jLabel1.getVerticalTextPosition() == SwingConstants.CENTER) {
                    jLabel1.setVerticalTextPosition(SwingConstants.BOTTOM);
                    jLabel5.setText("BOTTOM");
                } else if (jLabel1.getVerticalTextPosition() == SwingConstants.BOTTOM) {
                    jLabel1.setVerticalTextPosition(SwingConstants.TOP);
                    jLabel5.setText("TOP");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Change Text Position Relative to Icon - VERTICAL  */\n\n"
                        + "jLabel1.setVerticalTextPosition(SwingConstants.TOP);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Reset:\n"
                        + "    jLabel1.setVerticalTextPosition(SwingConstants.CENTER);\n"
                        + "\n"
                        + "Possible Values:\n"
                        + "    SwingConstants.TOP (1)\n"
                        + "    SwingConstants.CENTER (0) - default\n"
                        + "    SwingConstants.BOTTOM (3)\n"
                        + "*/\n"
                );
            }
        });
    }
}
