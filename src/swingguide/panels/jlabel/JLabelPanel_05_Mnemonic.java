/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jlabel;

import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.JLabel;

/**
 *
 * @author Light
 */
public class JLabelPanel_05_Mnemonic extends ComponentPanel {

    /**
     * Creates new form NewJPanel4
     */
    public JLabelPanel_05_Mnemonic() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();

        jCheckBox12.setText("Set this Button to gain focus with Mnemonic");

        jCheckBox11.setText("Set Displayed Mnemonic Index to 1");

        jCheckBox10.setText("Set Mnemonic to Alt+R");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox12))
                .addContainerGap(159, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jCheckBox10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox12)
                .addContainerGap(212, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    // End of variables declaration//GEN-END:variables

    @Override
    public String getTitle() {
        return "Mnemonic";
    }
    
    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {
        
        JLabel jLabel1 = (JLabel)primaryComponent;
        
        //Set Mnemonic to R
        jCheckBox10.setAction(new AbstractAction(jCheckBox10.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox10.isSelected()) {
                    jLabel1.setDisplayedMnemonic('R');
                } else {
                    jLabel1.setDisplayedMnemonic(0);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Mnemonic to R  */\n\n"
                        + "jLabel1.setDisplayedMnemonic('R');\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Requests focus for the component tied (using \"setLabelFor\") to this JLabel \n"
                        + "    Assigning the character 'R', for example, requires typing Alt+R to request focus\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jLabel1.setDisplayedMnemonic(0);\n"
                        + "\n"
                        + "Note:\n"
                        + "    This also resets the Displayed Mnemonic Index\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Set Displayed Mnemonic Index to 1
        jCheckBox11.setAction(new AbstractAction(jCheckBox11.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox11.isSelected()) {
                    int index = 1;
                    if (jLabel1.getText() != null && jLabel1.getText().length() >= (index + 1)) {
                        jLabel1.setDisplayedMnemonicIndex(index);
                    }
                } else {
                    jLabel1.setDisplayedMnemonicIndex(-1);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Displayed Mnemonic Index to 1  */\n\n"
                        + "int index = 1;\n"
                        + "if(jLabel1.getText() != null && jLabel1.getText().length() >= (index+1)){\n"
                        + "    jLabel1.setDisplayedMnemonicIndex(index);\n"
                        + "}\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Places an underscore on the text character at the index\n"
                        + "\n"
                        + "Reset:\n"
                        + "    jLabel1.setDisplayedMnemonicIndex(-1);\n"
                        + "\n"
                        + "Note:\n"
                        + "    Doesn't work when JLabel is using HTML text\n"
                        + "    The provided index must be less than the text length\n"
                        + "\n"
                        + "*/\n"
                );
            }
        });

        //Set Label to this Button
        jCheckBox12.setAction(new AbstractAction(jCheckBox12.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox12.isSelected()) {
                    jLabel1.setLabelFor(jCheckBox12);
                } else {
                    jLabel1.setLabelFor(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Label to this Button  */\n\n"
                        + "jLabel1.setLabelFor(jToggleButton5);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Set the Component that gets focus when the JLabel's mnemonic is fired.\n"
                        + "*/\n"
                );
            }
        });
    }
}
