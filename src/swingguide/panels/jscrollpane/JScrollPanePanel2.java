/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jscrollpane;

import java.awt.BasicStroke;
import swingguide.helpers.EventButton;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EventObject;
import javax.swing.AbstractAction;
import static javax.swing.Action.NAME;
import javax.swing.ButtonModel;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.DefaultSingleSelectionModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.JViewport;
import javax.swing.ScrollPaneConstants;
import javax.swing.ScrollPaneLayout;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.ViewportLayout;
import javax.swing.WindowConstants;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.plaf.UIResource;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import javax.swing.plaf.synth.SynthTabbedPaneUI;

/**
 *
 */
public class JScrollPanePanel2 extends javax.swing.JPanel {

    private int count = 0;

    private int eventCount = 0;

    private int difference = 0;
    private Color backgroundColor;
    private ArrayList<EventButton> eventLabels;
    private long startTime;
    
    private ChangeListener headerListener;
    
    private Component tableHeader;
    private Component upperRightCorner;

    /**
     * Creates new form JTabbedPanePanel
     */
    public JScrollPanePanel2() {
        initComponents();

        setupComponentsForTab_1();
        setupComponentsForTab_2();
        setupComponentsForTab_3();
        setupComponentsForTab_4();
        setupComponentsForTab_5();
        setupComponentsForTab_6();

        setupEventLabels();

        additionalSetup();
        
        jScrollPane.setLayout(new ScrollPaneLayout(){
            @Override
            public Dimension preferredLayoutSize(Container parent) {
                Dimension dim = super.preferredLayoutSize(parent);
                dim = new Dimension((int)dim.getWidth()-200,(int)dim.getHeight());
                dim = new Dimension(100,100);
                return dim;
            }

            @Override
            public Rectangle getViewportBorderBounds(JScrollPane scrollpane) {
                return super.getViewportBorderBounds(scrollpane); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Dimension minimumLayoutSize(Container parent) {
                return new Dimension(100,100);
            }
            
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup2 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup3 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup4 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup5 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup6 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        buttonGroup7 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jRadioButton5 = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jRadioButton7 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jRadioButton8 = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jRadioButton15 = new javax.swing.JRadioButton();
        jRadioButton16 = new javax.swing.JRadioButton();
        jLabel22 = new javax.swing.JLabel();
        jRadioButton9 = new javax.swing.JRadioButton();
        jPanel20 = new javax.swing.JPanel();
        jRadioButton17 = new javax.swing.JRadioButton();
        jRadioButton18 = new javax.swing.JRadioButton();
        jLabel25 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jRadioButton19 = new javax.swing.JRadioButton();
        jRadioButton20 = new javax.swing.JRadioButton();
        jLabel28 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton10 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jToggleButton16 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton14 = new javax.swing.JToggleButton();
        jToggleButton12 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jToggleButton17 = new javax.swing.JToggleButton();
        jToggleButton15 = new javax.swing.JToggleButton();
        jToggleButton23 = new javax.swing.JToggleButton();
        jToggleButton27 = new javax.swing.JToggleButton();
        jToggleButton28 = new javax.swing.JToggleButton();
        jToggleButton20 = new javax.swing.JToggleButton();
        jToggleButton33 = new javax.swing.JToggleButton();
        jPanel14 = new javax.swing.JPanel();
        jToggleButton19 = new javax.swing.JToggleButton();
        jToggleButton18 = new javax.swing.JToggleButton();
        jPanel16 = new javax.swing.JPanel();
        jToggleButton13 = new javax.swing.JToggleButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton21 = new javax.swing.JToggleButton();
        jToggleButton22 = new javax.swing.JToggleButton();
        jButton3 = new javax.swing.JButton();
        jToggleButton25 = new javax.swing.JToggleButton();
        jToggleButton26 = new javax.swing.JToggleButton();
        jToggleButton29 = new javax.swing.JToggleButton();
        jToggleButton30 = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane(){
            @Override
            public Insets getInsets(){
                return new Insets(50,50,50,50);
            }
        };
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSplitPane3 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        eventButton1 = new swingguide.helpers.EventButton();
        eventButton2 = new swingguide.helpers.EventButton();
        eventButton3 = new swingguide.helpers.EventButton();
        eventButton4 = new swingguide.helpers.EventButton();
        eventButton5 = new swingguide.helpers.EventButton();
        eventButton6 = new swingguide.helpers.EventButton();
        eventButton7 = new swingguide.helpers.EventButton();
        eventButton8 = new swingguide.helpers.EventButton();
        eventButton9 = new swingguide.helpers.EventButton();
        eventButton10 = new swingguide.helpers.EventButton();
        eventButton11 = new swingguide.helpers.EventButton();
        eventButton12 = new swingguide.helpers.EventButton();
        eventButton13 = new swingguide.helpers.EventButton();
        eventButton14 = new swingguide.helpers.EventButton();
        eventButton15 = new swingguide.helpers.EventButton();
        eventButton16 = new swingguide.helpers.EventButton();
        eventButton17 = new swingguide.helpers.EventButton();
        eventButton18 = new swingguide.helpers.EventButton();
        eventButton19 = new swingguide.helpers.EventButton();
        eventButton20 = new swingguide.helpers.EventButton();
        eventButton21 = new swingguide.helpers.EventButton();
        eventButton22 = new swingguide.helpers.EventButton();
        eventButton23 = new swingguide.helpers.EventButton();
        eventButton24 = new swingguide.helpers.EventButton();
        eventButton25 = new swingguide.helpers.EventButton();
        eventButton26 = new swingguide.helpers.EventButton();
        eventButton27 = new swingguide.helpers.EventButton();
        eventButton28 = new swingguide.helpers.EventButton();
        eventButton29 = new swingguide.helpers.EventButton();
        eventButton30 = new swingguide.helpers.EventButton();
        eventButton31 = new swingguide.helpers.EventButton();
        eventButton32 = new swingguide.helpers.EventButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jSplitPane1.setDividerLocation(580);

        jSplitPane2.setDividerLocation(441);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {320};
        jPanel2.setLayout(jPanel2Layout);

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(189, 210, 219), 3), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)))));
        jTabbedPane2.setMinimumSize(new java.awt.Dimension(400, 441));
        jTabbedPane2.setPreferredSize(new java.awt.Dimension(400, 441));

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Viewport"));

        jLabel1.setText("Viewport Size:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Set with JPanel");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Set with JTable");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Set with JTextArea");

        jLabel2.setText("Viewport Component Prefered Size:");

        jLabel7.setText("ViewPort Component Size:");
        jLabel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        jButton5.setText("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jRadioButton2)
                                    .addComponent(jRadioButton1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(47, 47, 47))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jRadioButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5)
                        .addGap(72, 72, 72))))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Row Header"));

        buttonGroup2.add(jRadioButton5);
        jRadioButton5.setText("Set  with JPanel");

        jLabel3.setText("Row Header Dimentions:");

        jLabel4.setText("Row Header Component Size:");

        jLabel8.setText("Row Header Component Prefered Size:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jRadioButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Column Header"));

        buttonGroup3.add(jRadioButton7);
        jRadioButton7.setText("Set with JTableHeader (from JTable)");
        jRadioButton7.setEnabled(false);

        jLabel5.setText("Column Header Dimentions:");

        jLabel6.setText("Column Header Component Size:");

        jLabel9.setText("Column Header Component Perfered Size:");

        buttonGroup3.add(jRadioButton8);
        jRadioButton8.setText("Set with JPanel");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton8)
                            .addComponent(jRadioButton7))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 333, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton7)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Viewports", jPanel6);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Upper Left Corner"));

        buttonGroup4.add(jRadioButton4);
        jRadioButton4.setText("Set with JPanel");

        buttonGroup4.add(jRadioButton6);
        jRadioButton6.setText("Set with JButton");

        jLabel10.setText("jLabel10");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton6)
                    .addComponent(jLabel10))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10))
        );

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Upper Right Corner"));

        buttonGroup5.add(jRadioButton15);
        jRadioButton15.setText("Set with JPanel");

        buttonGroup5.add(jRadioButton16);
        jRadioButton16.setText("Set with JButton");

        jLabel22.setText("jLabel10");

        buttonGroup5.add(jRadioButton9);
        jRadioButton9.setText("Set with Component from JTable");
        jRadioButton9.setEnabled(false);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton9)
                    .addComponent(jRadioButton15)
                    .addComponent(jLabel22)
                    .addComponent(jRadioButton16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jRadioButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22))
        );

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Lower Right Corner"));

        buttonGroup7.add(jRadioButton17);
        jRadioButton17.setText("Set with JPanel");

        buttonGroup7.add(jRadioButton18);
        jRadioButton18.setText("Set with JButton");

        jLabel25.setText("jLabel10");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton17)
                    .addComponent(jRadioButton18)
                    .addComponent(jLabel25))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jRadioButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25))
        );

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Lower Left Corner"));

        buttonGroup6.add(jRadioButton19);
        jRadioButton19.setText("Set with JPanel");

        buttonGroup6.add(jRadioButton20);
        jRadioButton20.setText("Set with JButton");

        jLabel28.setText("jLabel10");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton19)
                    .addComponent(jRadioButton20)
                    .addComponent(jLabel28))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jRadioButton19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Corners", jPanel7);

        jCheckBox5.setText("MouseWheel Scrolling Enabled");

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Horizontal ScrollBar"));

        jLabel11.setText("Current / Min / Max");

        jLabel19.setText("Unit / Block");

        jButton6.setText("Scroll to Min value");

        jCheckBox1.setText("Set Unit Increment to 50");

        jCheckBox2.setText("Set Block Increment to 60");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton4.setText("Change Polacy");

        jLabel13.setText("HORIZONTAL_SCROLLBAR_AS_NEEDED");

        jButton1.setText("Scroll to Middle value");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox2)
                    .addComponent(jLabel11)
                    .addComponent(jLabel19)
                    .addComponent(jButton6)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addComponent(jButton1)
                    .addComponent(jCheckBox1))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Vertical ScrollBar"));

        jLabel12.setText("Current / Min / Max");

        jLabel20.setText("Unit / Block");

        jButton7.setText("Scroll to Min value");

        jCheckBox3.setText("Set Unit Increment to 50");

        jCheckBox4.setText("Set Block Increment to 60");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });

        jButton10.setText("Change Polacy");

        jLabel14.setText("VERTICAL_SCROLLBAR_AS_NEEDED");

        jButton11.setText("Scroll to Middle value");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel20)
                    .addComponent(jButton7)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14))
                    .addComponent(jButton11)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton10)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(jCheckBox3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                .addComponent(jCheckBox4)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jCheckBox5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Scrolling", jPanel4);

        jToggleButton16.setText("Hide the Focus Border");
        jToggleButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton16ActionPerformed(evt);
            }
        });

        jToggleButton6.setText("Set Foreground Color");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });

        jToggleButton14.setText("Don't paint Border");
        jToggleButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton14ActionPerformed(evt);
            }
        });

        jToggleButton12.setText("Set Gap between Icon and Text");
        jToggleButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton12ActionPerformed(evt);
            }
        });

        jToggleButton7.setText("Set Background Color");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });

        jToggleButton17.setText("Make Invisible");
        jToggleButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton17ActionPerformed(evt);
            }
        });

        jToggleButton15.setText("Set Viewport Border around the Viewport");
        jToggleButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton15ActionPerformed(evt);
            }
        });

        jToggleButton23.setText(".getMargin(inset)");

        jToggleButton27.setText(".setMnemonic");

        jToggleButton28.setText(".setDisplayedMneonic");

        jToggleButton20.setText("Change Font");
        jToggleButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton20ActionPerformed(evt);
            }
        });

        jToggleButton33.setText("Change Orientation for Row Header / Vertical ScrollBar");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton16)
                    .addComponent(jToggleButton6)
                    .addComponent(jToggleButton14)
                    .addComponent(jToggleButton12)
                    .addComponent(jToggleButton7)
                    .addComponent(jToggleButton17)
                    .addComponent(jToggleButton15)
                    .addComponent(jToggleButton23)
                    .addComponent(jToggleButton27)
                    .addComponent(jToggleButton28)
                    .addComponent(jToggleButton20)
                    .addComponent(jToggleButton33))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton33)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Overall Look", jPanel13);

        jToggleButton19.setText("Disable Button");
        jToggleButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton19ActionPerformed(evt);
            }
        });

        jToggleButton18.setText("Disable Rollover");
        jToggleButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton19)
                    .addComponent(jToggleButton18))
                .addContainerGap(266, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton18)
                .addContainerGap(340, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Disable", jPanel14);

        jToggleButton13.setText(".setActionCommand()");
        jToggleButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton13ActionPerformed(evt);
            }
        });

        jButton2.setText("AddImpl");

        jToggleButton21.setText("Set as Default Button .setDefaultCapable()");

        jToggleButton22.setText(".setHideActionText()");

        jButton3.setText(".doClick(seconds)");

        jToggleButton25.setText(".setAction()");

        jToggleButton26.setText(".configurePropertiesFromAction()");

        jToggleButton29.setText(".setMultiClickThreshhold");

        jToggleButton30.setText(".setModel");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton13)
                    .addComponent(jButton2)
                    .addComponent(jToggleButton21)
                    .addComponent(jToggleButton22)
                    .addComponent(jButton3)
                    .addComponent(jToggleButton25)
                    .addComponent(jToggleButton26)
                    .addComponent(jToggleButton29)
                    .addComponent(jToggleButton30))
                .addContainerGap(136, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton30)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Other", jPanel16);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        jPanel2.add(jTabbedPane2, gridBagConstraints);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("JScrollPane"));
        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        jPanel3.add(jScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel2.add(jPanel3, gridBagConstraints);

        jSplitPane2.setTopComponent(jPanel2);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Code Example"));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(232, 232, 232));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jSplitPane2.setRightComponent(jScrollPane1);

        jSplitPane1.setLeftComponent(jSplitPane2);

        jSplitPane3.setDividerLocation(500);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Events and Output"));

        jTextArea2.setBackground(new java.awt.Color(239, 239, 239));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane3.setViewportView(jTextArea2);

        jSplitPane3.setBottomComponent(jScrollPane3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Events"));
        jPanel5.setLayout(new java.awt.GridBagLayout());
        jPanel5.add(eventButton1, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton2, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton3, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton4, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton5, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton6, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton7, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton8, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton9, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton10, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton11, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton12, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton13, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton14, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton15, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton16, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton17, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton18, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton19, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton20, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton21, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton22, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton23, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton24, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton25, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton26, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton27, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton28, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton29, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton30, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton31, new java.awt.GridBagConstraints());
        jPanel5.add(eventButton32, new java.awt.GridBagConstraints());

        jScrollPane2.setViewportView(jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jSplitPane3.setLeftComponent(jPanel1);

        jSplitPane1.setRightComponent(jSplitPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1405, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 719, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        int newDivLoc = getSize().width - difference;
        jSplitPane1.setDividerLocation(newDivLoc);
    }//GEN-LAST:event_formComponentResized

    private void jToggleButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton19ActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jToggleButton19ActionPerformed

    private void jToggleButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton16ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton16ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton14ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton14ActionPerformed

    private void jToggleButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton18ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton18ActionPerformed

    private void jToggleButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton12ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton12ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton17ActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jToggleButton17ActionPerformed

    private void jToggleButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton13ActionPerformed

    private void jToggleButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton15ActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jToggleButton15ActionPerformed

    private void jToggleButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton20ActionPerformed
        // TODO add your handling code here:
      
    }//GEN-LAST:event_jToggleButton20ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        ///jScrollPane.setViewportBorder(new LineBorder(Color.PINK,20));
//        jScrollPane.getViewport().setBorder(new LineBorder(Color.PINK,20));
//        jScrollPane.setViewport(new JViewport(){
//            @Override
//            public Insets getInsets(){
//                return new Insets(50,50,50,50);
//            }
//        });
        jScrollPane.getViewport().addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                System.out.println(jScrollPane.getViewport().getSize());
            }
            
        });
        System.out.println(jScrollPane.getViewport().getSize());
        
        jScrollPane.getViewport().reshape(100,200,300,400);
        jScrollPane.getViewport().revalidate();
        jScrollPane.getViewport().repaint();
        System.out.println(jScrollPane.getViewport().getSize());
        
        
    }//GEN-LAST:event_jButton5ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private swingguide.helpers.EventButton eventButton1;
    private swingguide.helpers.EventButton eventButton10;
    private swingguide.helpers.EventButton eventButton11;
    private swingguide.helpers.EventButton eventButton12;
    private swingguide.helpers.EventButton eventButton13;
    private swingguide.helpers.EventButton eventButton14;
    private swingguide.helpers.EventButton eventButton15;
    private swingguide.helpers.EventButton eventButton16;
    private swingguide.helpers.EventButton eventButton17;
    private swingguide.helpers.EventButton eventButton18;
    private swingguide.helpers.EventButton eventButton19;
    private swingguide.helpers.EventButton eventButton2;
    private swingguide.helpers.EventButton eventButton20;
    private swingguide.helpers.EventButton eventButton21;
    private swingguide.helpers.EventButton eventButton22;
    private swingguide.helpers.EventButton eventButton23;
    private swingguide.helpers.EventButton eventButton24;
    private swingguide.helpers.EventButton eventButton25;
    private swingguide.helpers.EventButton eventButton26;
    private swingguide.helpers.EventButton eventButton27;
    private swingguide.helpers.EventButton eventButton28;
    private swingguide.helpers.EventButton eventButton29;
    private swingguide.helpers.EventButton eventButton3;
    private swingguide.helpers.EventButton eventButton30;
    private swingguide.helpers.EventButton eventButton31;
    private swingguide.helpers.EventButton eventButton32;
    private swingguide.helpers.EventButton eventButton4;
    private swingguide.helpers.EventButton eventButton5;
    private swingguide.helpers.EventButton eventButton6;
    private swingguide.helpers.EventButton eventButton7;
    private swingguide.helpers.EventButton eventButton8;
    private swingguide.helpers.EventButton eventButton9;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JRadioButton jRadioButton17;
    private javax.swing.JRadioButton jRadioButton18;
    private javax.swing.JRadioButton jRadioButton19;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton20;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToggleButton jToggleButton12;
    private javax.swing.JToggleButton jToggleButton13;
    private javax.swing.JToggleButton jToggleButton14;
    private javax.swing.JToggleButton jToggleButton15;
    private javax.swing.JToggleButton jToggleButton16;
    private javax.swing.JToggleButton jToggleButton17;
    private javax.swing.JToggleButton jToggleButton18;
    private javax.swing.JToggleButton jToggleButton19;
    private javax.swing.JToggleButton jToggleButton20;
    private javax.swing.JToggleButton jToggleButton21;
    private javax.swing.JToggleButton jToggleButton22;
    private javax.swing.JToggleButton jToggleButton23;
    private javax.swing.JToggleButton jToggleButton25;
    private javax.swing.JToggleButton jToggleButton26;
    private javax.swing.JToggleButton jToggleButton27;
    private javax.swing.JToggleButton jToggleButton28;
    private javax.swing.JToggleButton jToggleButton29;
    private javax.swing.JToggleButton jToggleButton30;
    private javax.swing.JToggleButton jToggleButton33;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    // End of variables declaration//GEN-END:variables

    private void updateViewportDimentions() {
        Dimension dim = jScrollPane.getViewport().getSize();
        jLabel1.setText("Viewport Size: " + dim.width + "w, " + dim.height + "h");
        Component comp = jScrollPane.getViewport().getView();
        if (comp != null) {
            Dimension compDim = comp.getPreferredSize();
            Dimension compDim2 = comp.getSize();
            jLabel2.setText("Viewport Component Prefered Size: " + compDim.width + "w, " + compDim.height + "h");
            jLabel7.setText("Viewport Component Size: " + compDim2.width + "w, " + compDim2.height + "h");
        } else {
            jLabel2.setText("Viewport Component Prefered Size: N/A");
            jLabel7.setText("Viewport Component Size: N/A");
        }
        if (jScrollPane.getRowHeader() != null) {
            Dimension rowDim = jScrollPane.getRowHeader().getSize();
            jLabel3.setText("Row Header Size: " + rowDim.width + "w, " + rowDim.height + "h");
            Component rowComp = jScrollPane.getRowHeader().getView();
            if (rowComp != null) {
                Dimension compDim = rowComp.getPreferredSize();
                Dimension compDim2 = rowComp.getSize();
                jLabel8.setText("Row Header Component Prefered Size: " + compDim.width + "w, " + compDim.height + "h");
                jLabel4.setText("Row Header Component Size: " + compDim2.width + "w, " + compDim2.height + "h");
            } else {
                jLabel8.setText("Row Header Component Prefered Size: N/A");
                jLabel4.setText("Row Header Component Size: N/A");
            }
        } else {
            jLabel3.setText("Row Header Size: N/A");
            jLabel8.setText("Row Header Component Prefered Size: N/A");
            jLabel4.setText("Row Header Component Size: N/A");
        }
        if (jScrollPane.getColumnHeader() != null) {
            Dimension columnDim = jScrollPane.getColumnHeader().getSize();
            jLabel5.setText("Column Header Size: " + columnDim.width + "w, " + columnDim.height + "h");
            Component columnComp = jScrollPane.getColumnHeader().getView();
            if (columnComp != null) {
                Dimension compDim = columnComp.getPreferredSize();
                Dimension compDim2 = columnComp.getSize();
                jLabel9.setText("Column Header Component Prefered Size: " + compDim.width + "w, " + compDim.height + "h");
                jLabel6.setText("Column Header Component Size: " + compDim2.width + "w, " + compDim2.height + "h");
            } else {
                jLabel9.setText("Column Header Component Prefered Size: N/A");
                jLabel6.setText("Column Header Component Size: N/A");
            }
        } else {
            jLabel5.setText("Column Header Size: N/A");
            jLabel9.setText("Column Header Component Prefered Size: N/A");
            jLabel6.setText("Column Header Component Size: N/A");
        }
                
        if (jScrollPane.getCorner(ScrollPaneConstants.UPPER_LEFT_CORNER) != null) {
            Component corner = jScrollPane.getCorner(ScrollPaneConstants.UPPER_LEFT_CORNER);
            jLabel10.setText("Upper Left Corner: "+corner.getSize().width+"w "+corner.getSize().height+"h");
        }else{
            jLabel10.setText("Upper Left Corner: N/A");
        }
        
        if (jScrollPane.getCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER) != null) {
            Component corner = jScrollPane.getCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER);
            jLabel22.setText("Upper Right Corner: "+corner.getSize().width+"w "+corner.getSize().height+"h");
        }else{
            jLabel22.setText("Upper Right Corner: N/A");
        }
        
        if (jScrollPane.getCorner(ScrollPaneConstants.LOWER_LEFT_CORNER) != null) {
            Component corner = jScrollPane.getCorner(ScrollPaneConstants.LOWER_LEFT_CORNER);
            jLabel28.setText("Lower Left Corner: "+corner.getSize().width+"w "+corner.getSize().height+"h");
        }else{
            jLabel28.setText("Lower Left Corner: N/A");
        }
        
        if (jScrollPane.getCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER) != null) {
            Component corner = jScrollPane.getCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER);
            jLabel25.setText("Lower Right Corner: "+corner.getSize().width+"w "+corner.getSize().height+"h");
        }else{
            jLabel25.setText("Lower Right Corner: N/A");
        }
    }
    
    private void setCodeTextArea(String text) {
        jTextArea1.setText(text);
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jScrollPane1.getVerticalScrollBar().setValue(0);
                jScrollPane1.getHorizontalScrollBar().setValue(0);
            }
        });
    }

    private void addEventToTextArea(EventButton label, EventObject event) {
        eventCount++;
        int time = (int)(System.currentTimeMillis()-startTime);
        addTextToTextArea((eventCount) + ".) " + (time/1000)+"."+(time%1000) + " - " + label.getEventLabel() + "\n\n"
                + processEventText(event));
    }

    private void addTextToTextArea(String text) {
        jTextArea2.setText(text + "\n\n\n\n" + jTextArea2.getText());
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jScrollPane3.getVerticalScrollBar().setValue(0);
                jScrollPane3.getHorizontalScrollBar().setValue(0);
            }
        });
    }

    private String processEventText(EventObject event) {
        String text = "";
        char[] chars = event.toString().toCharArray();
        String tabChunk = "        ";
        String tabs = "";
        for (int index = 0; index < chars.length; index++) {
            if (chars[index] == '[') {
                tabs = tabs + tabChunk;
                text = text + "\n" + tabs;
            } else if (chars[index] == ']') {
                tabs = tabs.substring(tabChunk.length());
                text = text + "\n" + tabs;
            } else if (chars[index] == ',') {
                text = text + "\n" + tabs;
            } else if (chars[index] == ';') {
                text = text + "\n" + tabs;
            } else {
                text = text + chars[index];
            }
        }
        return text;
    }
    
    private void moveEvent(EventButton eventLabel){
        eventLabels.remove(eventLabel);
        eventLabels.add(0, eventLabel);
        rebuildEventPanel();
        jScrollPane2.getVerticalScrollBar().setValue(0);
    }
    
    private void rebuildEventPanel(){
        jPanel5.removeAll();
        GridBagConstraints gbc = new GridBagConstraints();
        for(int index = 0; index < eventLabels.size(); index++){
            gbc.gridx = 0;
            gbc.gridy = index;
            gbc.anchor = GridBagConstraints.NORTHWEST;
            gbc.weightx = 100.0;
          
            if(index == eventLabels.size()-1){
                gbc.weighty = 100.0;
                gbc.insets = new java.awt.Insets(5, 10, 10, 10);
            }else{
                gbc.weighty = 0.0;
                gbc.insets = new java.awt.Insets(5, 10, 0, 10);
            }
            jPanel5.add(eventLabels.get(index), gbc);
        }
    }
    
    private void eventFiredActions(EventButton eventButton, EventObject event) {
        addEventToTextArea(eventButton, event);
        eventButton.eventFired(eventCount);
        moveEvent(eventButton);
    }

    private void additionalSetup() {
        
        jSplitPane1.setUI(new SynthSplitPaneUI() {
            @Override
            protected void finishDraggingTo(int location) {
                super.finishDraggingTo(location); //To change body of generated methods, choose Tools | Templates.
                difference = jSplitPane1.getSize().width - jSplitPane1.getDividerLocation();
            }
        });
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                jSplitPane1.setDividerLocation((int)(getWidth()-(jPanel1.getPreferredSize().getWidth()+60)));
            }
        });
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                difference = jSplitPane1.getSize().width - jSplitPane1.getDividerLocation();
            }
        });
        
        jScrollPane2.getVerticalScrollBar().setUnitIncrement(25);
        
        rebuildEventPanel();
        
        startTime = System.currentTimeMillis();
        
        jScrollPane.addComponentListener(new ComponentListener() {
            @Override
            public void componentResized(ComponentEvent e) {
                updateRowAndColumnHeaders();
            }

            @Override
            public void componentMoved(ComponentEvent e) {
            }

            @Override
            public void componentShown(ComponentEvent e) {
            }

            @Override
            public void componentHidden(ComponentEvent e) {
            }
        });
        
        jScrollPane.getHorizontalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                updateViewportDimentions();
            }
        });
        
        jScrollPane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                updateViewportDimentions();
            }
        });
        
        jScrollPane.getViewport().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                eventFiredActions(eventButton5, evt);
            }
        });
        
        jScrollPane.getViewport().addComponentListener(new ComponentAdapter(){
            @Override
            public void componentResized(ComponentEvent e) {
                updateViewportDimentions();
            }
        });
        
        headerListener = new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                updateViewportDimentions();
            }
        };
        
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getPropertyName().compareTo("rowHeader")==0){
                    if(jScrollPane.getRowHeader() != null){
                        ArrayList<ChangeListener> list = new ArrayList<>();
                        list.addAll(Arrays.asList(jScrollPane.getRowHeader().getChangeListeners()));
                        if(!list.contains(headerListener)){
                            jScrollPane.getRowHeader().addChangeListener(headerListener);
                        }
                    }
                }
            }
        });
        
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener(){
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if(evt.getPropertyName().compareTo("columnHeader")==0){
                    if(jScrollPane.getColumnHeader() != null){
                        ArrayList<ChangeListener> list = new ArrayList<>();
                        list.addAll(Arrays.asList(jScrollPane.getColumnHeader().getChangeListeners()));
                        if(!list.contains(headerListener)){
                            jScrollPane.getColumnHeader().addChangeListener(headerListener);
                        }
                    }
                }
            }
        });
        
        jRadioButton7.setEnabled(false);
        jRadioButton9.setEnabled(false);
        
        jSplitPane2.setDividerLocation(680);
    }
    
    private void setupComponentsForTab_1() {
        
        //Set with JPanel
        jRadioButton1.setAction(new AbstractAction(jRadioButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
if (jRadioButton1.isSelected()) {
    tableHeader = null;
    upperRightCorner = null;
    jRadioButton7.setSelected(false);
    jRadioButton7.setEnabled(false);
    jRadioButton9.setSelected(false);
    jRadioButton9.setEnabled(false);
    JPanel panel = new JPanel();
    panel.setBorder(new LineBorder(Color.GREEN,4));
    panel.setPreferredSize(new Dimension(2000, 2000));
    panel.addComponentListener(new ComponentAdapter(){
        @Override
        public void componentResized(ComponentEvent e) {
            updateViewportDimentions();
        }
    });
    jScrollPane.setViewportView(panel);
    if(jScrollPane.getColumnHeader() != null && jScrollPane.getColumnHeader().getView() == null){
        jRadioButton8.setSelected(false);
    }
    setCodeTextArea("/*  "+jRadioButton1.getText()+"  */\n\n"
            + "jScrollPane1.setViewport());");
} else {
    jScrollPane.setViewportView(null);
}
                updateRowAndColumnHeaders();
                updateViewportDimentions();
            }
        });

        //Set with JTable
        jRadioButton2.setAction(new AbstractAction(jRadioButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
if (jRadioButton2.isSelected()) {
    Object[][] array = new Object[300][10];
    Object[] columns = new Object[10];
    for (int index = 0; index < 10; index++) {
        for (int index2 = 0; index2 < 300; index2++) {
            array[index2][index] = "value" + index + index2;
        }
        columns[index] = "Column" + index;
    }
    JTable jTable = new JTable(array, columns);
    jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    jTable.addComponentListener(new ComponentAdapter(){
        @Override
        public void componentResized(ComponentEvent e) {
            updateViewportDimentions();
        }

    });
    tableHeader = jTable.getTableHeader();
    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, null);
    SwingUtilities.invokeLater(new Runnable(){
        @Override
        public void run() {
            upperRightCorner = jScrollPane.getCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER);
        }
    });

    jRadioButton7.setSelected(true);
    jRadioButton7.setEnabled(true);
    jRadioButton9.setSelected(true);
    jRadioButton9.setEnabled(true);
    jScrollPane.setViewportView(jTable);
    setCodeTextArea("/*  "+jRadioButton2.getText()+"  */\n\n"
            + "jScrollPane1.setViewport());");
} else {
    tableHeader = null;
    upperRightCorner = null;
    jRadioButton7.setSelected(false);
    jRadioButton7.setEnabled(false);
    jRadioButton9.setSelected(false);
    jRadioButton9.setEnabled(false);
    jScrollPane.setViewportView(null);
}
                updateRowAndColumnHeaders();
                updateViewportDimentions();
            }
        });

        //Set with JTextArea
        jRadioButton3.setAction(new AbstractAction(jRadioButton3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton3.isSelected()) {
                    tableHeader = null;
                    upperRightCorner = null;
                    jRadioButton7.setSelected(false);
                    jRadioButton7.setEnabled(false);
                    jRadioButton9.setSelected(false);
                    jRadioButton9.setEnabled(false);
                    JTextArea textArea = new JTextArea();
                    textArea.getDocument().addDocumentListener(new DocumentListener(){
                        @Override
                        public void insertUpdate(DocumentEvent e) {
                            updateRowAndColumnHeaders();
                            updateViewportDimentions();
                        }

                        @Override
                        public void removeUpdate(DocumentEvent e) {
                            updateRowAndColumnHeaders();
                            updateViewportDimentions();
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                            updateRowAndColumnHeaders();
                            updateViewportDimentions();
                        }                        
                    });
                    textArea.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateRowAndColumnHeaders();
                            updateViewportDimentions();
                        }

                    });
                    jScrollPane.setViewportView(textArea);
                    if(jScrollPane.getColumnHeader() != null && jScrollPane.getColumnHeader().getView() == null){
                        jRadioButton8.setSelected(false);
                    }
                    setCodeTextArea("/*  "+jRadioButton3.getText()+"  */\n\n"
                            + "jScrollPane1.setViewport());");
                } else {
                    jScrollPane.setViewportView(null);
                }
                updateRowAndColumnHeaders();
                updateViewportDimentions();
            }
        });
        
        //Set with JPanel
        jRadioButton5.setAction(new AbstractAction(jRadioButton5.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton5.isSelected()) {
                    JPanel panel = new JPanel();
                    panel.setPreferredSize(new Dimension(200, 200));
                    panel.setBorder(new LineBorder(Color.RED,4));
                    panel.addComponentListener(new ComponentAdapter(){
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateViewportDimentions();
                        }
                        
                    });
                    jScrollPane.setRowHeaderView(panel);
                } else {
                    jScrollPane.setRowHeaderView(null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateRowAndColumnHeaders();
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  "+jRadioButton5.getText()+"  */\n\n"
                        + "jScrollPane1.setRowHeader());");
            }
        });
        
        //Set with JTableHeader (from JTable)
        jRadioButton7.setAction(new AbstractAction(jRadioButton7.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton7.isSelected()) {
                    jScrollPane.setColumnHeaderView(tableHeader);
                }else{
                    jScrollPane.setColumnHeaderView(null);
                }
                updateRowAndColumnHeaders();
                updateViewportDimentions();
                setCodeTextArea("/*  "+jRadioButton7.getText()+"  */\n\n"
                        + "jScrollPane1.setColumnHeader());");
            }
        });
        
        //Set with JPanel
        jRadioButton8.setAction(new AbstractAction(jRadioButton8.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton8.isSelected()) {
                    JPanel panel = new JPanel();
                    panel.setBorder(new LineBorder(Color.BLUE,4));
                    panel.setPreferredSize(new Dimension(2000, 200));
                    panel.addComponentListener(new ComponentAdapter(){
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateViewportDimentions();
                        }
                    });
                    jScrollPane.setColumnHeaderView(panel);
                } else {
                    jScrollPane.setColumnHeaderView(null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateRowAndColumnHeaders();
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  "+jRadioButton8.getText()+"  */\n\n"
                        + "jScrollPane1.setColumnHeader());");
            }
        });
    }

    private void setupComponentsForTab_2() {
        //Set Upper Left Corner with JPanel
        jRadioButton4.setAction(new AbstractAction(jRadioButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton4.isSelected()){
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.PINK);
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, panel);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Upper Left Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Upper Left Corner with JButton
        jRadioButton6.setAction(new AbstractAction(jRadioButton6.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton6.isSelected()){
                    JButton button = new JButton();
                    button.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addTextToTextArea("Upper Left Corner Button");
                        }
                    });
                    button.setBackground(Color.PINK);
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, button);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_LEFT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Upper Left Corner with JButton  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Upper Right Corner with JPanel
        jRadioButton15.setAction(new AbstractAction(jRadioButton15.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton15.isSelected()){
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.ORANGE);
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, panel);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Upper Right Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Upper Right Corner with Component from JTable
        jRadioButton9.setAction(new AbstractAction(jRadioButton9.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton9.isSelected()){
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, upperRightCorner);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Upper Right Corner with Component from JTable  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Upper Right Corner with JButton
        jRadioButton16.setAction(new AbstractAction(jRadioButton16.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton16.isSelected()){
                    JButton button = new JButton();
                    button.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addTextToTextArea("Upper Right Corner Button");
                        }
                    });
                    button.setBackground(Color.ORANGE);
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, button);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.UPPER_RIGHT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Upper Right Corner with JButton  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Left Corner with JPanel
        jRadioButton19.setAction(new AbstractAction(jRadioButton19.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton19.isSelected()){
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.CYAN);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_LEFT_CORNER, panel);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_LEFT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Lower Left Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Left Corner with JButton
        jRadioButton20.setAction(new AbstractAction(jRadioButton20.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton20.isSelected()){
                    JButton button = new JButton();
                    button.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addTextToTextArea("Lower Left Corner Button");
                        }
                    });
                    button.setBackground(Color.CYAN);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_LEFT_CORNER, button);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_LEFT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Lower Left Corner with JButton  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Right Corner with JPanel
        jRadioButton17.setAction(new AbstractAction(jRadioButton17.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton17.isSelected()){
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.MAGENTA);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, panel);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Lower Right Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Right Corner with JButton
        jRadioButton18.setAction(new AbstractAction(jRadioButton18.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if(jRadioButton18.isSelected()){
                    JButton button = new JButton();
                    button.addActionListener(new ActionListener(){
                        @Override
                        public void actionPerformed(ActionEvent e) {
                            addTextToTextArea("Lower Right Corner Button");
                        }
                    });
                    button.setBackground(Color.MAGENTA);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, button);
                }else{
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, null);
                }
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateViewportDimentions();
                    }
                });
                setCodeTextArea("/*  Set Lower Right Corner with JButton  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
    }
    
    private void setupComponentsForTab_3() {
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Change Horizontal ScrollBar polacy
        jButton4.setAction(new AbstractAction(jButton4.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jScrollPane.getHorizontalScrollBarPolicy() == ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED) {
                    jScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
                } else if (jScrollPane.getHorizontalScrollBarPolicy() == ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER) {
                    jScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                } else if (jScrollPane.getHorizontalScrollBarPolicy() == ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS) {
                    jScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                }
                setCodeTextArea("/*  "+jButton4.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Scroll To the middle of the Viewport
        jButton6.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                int valueH = jScrollPane.getHorizontalScrollBar().getMaximum()/2;
                jScrollPane.getHorizontalScrollBar().setValue(valueH);
                int valueV = jScrollPane.getVerticalScrollBar().getMaximum()/2;
                jScrollPane.getVerticalScrollBar().setValue(valueV);
                setCodeTextArea("/*  "+jButton1.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Change Vertical ScrollBar polacy
        jButton10.setAction(new AbstractAction(jButton10.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jScrollPane.getVerticalScrollBarPolicy()== ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED) {
                    jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
                } else if (jScrollPane.getVerticalScrollBarPolicy() == ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER) {
                    jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
                } else if (jScrollPane.getVerticalScrollBarPolicy() == ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS) {
                    jScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
                }
                setCodeTextArea("/*  "+jButton10.getText()+"  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Right Corner with JPanel
        jRadioButton17.setAction(new AbstractAction(jRadioButton17.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton17.isSelected()) {
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.MAGENTA);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, panel);
                } else {
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, null);
                }
                setCodeTextArea("/*  Set Lower Right Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
        
        //Set Lower Right Corner with JPanel
        jRadioButton17.setAction(new AbstractAction(jRadioButton17.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton17.isSelected()) {
                    JPanel panel = new JPanel();
                    panel.setBackground(Color.MAGENTA);
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, panel);
                } else {
                    jScrollPane.setCorner(ScrollPaneConstants.LOWER_RIGHT_CORNER, null);
                }
                setCodeTextArea("/*  Set Lower Right Corner with JPanel  */\n\n"
                        + "jScrollPane1.setViewport());");
            }
        });
    }

    private void setupComponentsForTab_4() {
//        //Add Tab - Text
//        jButton6.setAction(new AbstractAction(jButton6.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                JPanel panel1 = new JPanel();
//                panel1.setBorder(new LineBorder(Color.RED, 4));
//                jTabbedPane1.addTab("New Tab " + (count++), panel1);
//                jTabbedPane1.setSelectedComponent(panel1);
//                setCodeTextArea("/*  Add Tab - Text  */\n\n"
//                        + "JPanel panel1 = new JPanel();\n"
//                        + "panel1.setBorder(new LineBorder(Color.RED, 4));\n"
//                        + "jTabbedPane1.addTab(\"New Tab\", panel1);\n"
//                        + "jTabbedPane1.setSelectedComponent(panel1); // or use setSelectedIndex");
//            }
//        });

//        //Add Tab - Text
//        jButton6.setAction(new AbstractAction(jButton6.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                JPanel panel1 = new JPanel();
//                panel1.setBorder(new LineBorder(Color.RED, 4));
//                jTabbedPane1.addTab("New Tab " + (count++), panel1);
//                jTabbedPane1.setSelectedComponent(panel1);
//                setCodeTextArea("/*  Add Tab - Text  */\n\n"
//                        + "JPanel panel1 = new JPanel();\n"
//                        + "panel1.setBorder(new LineBorder(Color.RED, 4));\n"
//                        + "jTabbedPane1.addTab(\"New Tab\", panel1);\n"
//                        + "jTabbedPane1.setSelectedComponent(panel1); // or use setSelectedIndex");
//            }
//        });
    }

    private void setupComponentsForTab_5() {
//        //Add Tab - Text
//        jButton6.setAction(new AbstractAction(jButton6.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                JPanel panel1 = new JPanel();
//                panel1.setBorder(new LineBorder(Color.RED, 4));
//                jTabbedPane1.addTab("New Tab " + (count++), panel1);
//                jTabbedPane1.setSelectedComponent(panel1);
//                setCodeTextArea("/*  Add Tab - Text  */\n\n"
//                        + "JPanel panel1 = new JPanel();\n"
//                        + "panel1.setBorder(new LineBorder(Color.RED, 4));\n"
//                        + "jTabbedPane1.addTab(\"New Tab\", panel1);\n"
//                        + "jTabbedPane1.setSelectedComponent(panel1); // or use setSelectedIndex");
//            }
//        });
    }

    private void setupComponentsForTab_6() {
//        //Add Tab - Text
//        jButton6.setAction(new AbstractAction(jButton6.getText()) {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                JPanel panel1 = new JPanel();
//                panel1.setBorder(new LineBorder(Color.RED, 4));
//                jTabbedPane1.addTab("New Tab " + (count++), panel1);
//                jTabbedPane1.setSelectedComponent(panel1);
//                setCodeTextArea("/*  Add Tab - Text  */\n\n"
//                        + "JPanel panel1 = new JPanel();\n"
//                        + "panel1.setBorder(new LineBorder(Color.RED, 4));\n"
//                        + "jTabbedPane1.addTab(\"New Tab\", panel1);\n"
//                        + "jTabbedPane1.setSelectedComponent(panel1); // or use setSelectedIndex");
//            }
//        });
    }
    
    private void setupEventLabels() {

        eventLabels = new ArrayList<>();
        
        //Horizontal ScrollBar Model Change 
        eventLabels.add(eventButton1);
        jScrollPane.getHorizontalScrollBar().getModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                eventFiredActions(eventButton1, evt);
            }
        });
        eventButton1.setButtonAction(new AbstractAction("JScrollBar Model Change ") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton1.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.getModel().addChangeListener(new ChangeListener() {\n"
                        + "});");
            }
        });

        //Veritical ScrollBar Model Change 
        eventLabels.add(eventButton2);
        jScrollPane.getVerticalScrollBar().getModel().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                eventFiredActions(eventButton2, evt);
            }
        });
        eventButton2.setButtonAction(new AbstractAction("JScrollBar Model Change ") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton2.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.getModel().addChangeListener(new ChangeListener() {\n"
                        + "});");
            }
        });
        
        //JScollBar Adjustment
        eventLabels.add(eventButton3);
        jScrollPane.getHorizontalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent evt) {
                eventFiredActions(eventButton3, evt);
            }
        });
        eventButton3.setButtonAction(new AbstractAction("JScollBar Adjustment") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton3.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {\n"
                        + "});");
            }
        });
        
        //JScollBar Adjustment
        eventLabels.add(eventButton4);
        jScrollPane.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent evt) {
                eventFiredActions(eventButton4, evt);
            }
        });
        eventButton4.setButtonAction(new AbstractAction("JScollBar Adjustment") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton4.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {\n"
                        + "});");
            }
        });

        //JViewport Change
        eventLabels.add(eventButton5);
        jScrollPane.getViewport().addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent evt) {
                eventFiredActions(eventButton5, evt);
            }
        });
        eventButton5.setButtonAction(new AbstractAction("JViewport Change") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton5.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.getViewport().addChangeListener(new ChangeListener() {\n"
                        + "});");
            }
        });
        
//        //JViewport Change
//        eventLabels.add(eventButton6);
//        jScrollPane1.getRowHeader().addChangeListener(new ChangeListener() {
//            @Override
//            public void stateChanged(ChangeEvent evt) {
//                eventFiredActions(eventButton6, evt);
//            }
//        });
//        eventButton6.setButtonAction(new AbstractAction("JViewport Change") {
//           @Override
//           public void actionPerformed(ActionEvent e) {
//               setCodeTextArea("/* " + eventButton6.getEventLabel() + " Event Listener */\n\n"
//                        + "jScrollPane1.getViewport().addChangeListener(new ChangeListener() {\n"
//                        + "});");
//            }
//        });
        
//        //JViewport Change
//        eventLabels.add(eventButton7);
//        jScrollPane1.getColumnHeader().addChangeListener(new ChangeListener() {
//            @Override
//            public void stateChanged(ChangeEvent evt) {
//                eventFiredActions(eventButton7, evt);
//            }
//        });
//        eventButton7.setButtonAction(new AbstractAction("JViewport Change") {
//           @Override
//           public void actionPerformed(ActionEvent e) {
//               setCodeTextArea("/* " + eventButton7.getEventLabel() + " Event Listener */\n\n"
//                        + "jScrollPane1.getViewport().addChangeListener(new ChangeListener() {\n"
//                        + "});");
//            }
//        });

        //Column Header Changed
        eventLabels.add(eventButton8);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("columnHeader") == 0) {
                    eventFiredActions(eventButton8, evt);
                }
            }
        });
        eventButton8.setButtonAction(new AbstractAction("Column Header Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton8.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"columnHeader\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Horizontal ScrollBar Changed
        eventLabels.add(eventButton9);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("horizontalScrollBar") == 0) {
                    eventFiredActions(eventButton9, evt);
                }
            }
        });
        eventButton9.setButtonAction(new AbstractAction("Horizontal ScrollBar Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton9.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"horizontalScrollBar\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Horizontal ScrollBar Policy Changed
        eventLabels.add(eventButton10);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("horizontalScrollBarPolicy") == 0) {
                    eventFiredActions(eventButton10, evt);
                }
            }
        });
        eventButton10.setButtonAction(new AbstractAction("Horizontal ScrollBar Policy Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton10.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"horizontalScrollBarPolicy\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Row Header Changed
        eventLabels.add(eventButton11);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("rowHeader") == 0) {
                    eventFiredActions(eventButton11, evt);
                }
            }
        });
        eventButton11.setButtonAction(new AbstractAction("Row Header Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton11.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"rowHeader\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Vertical ScrollBar Changed
        eventLabels.add(eventButton12);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("verticalScrollBar") == 0) {
                    eventFiredActions(eventButton12, evt);
                }
            }
        });
        eventButton12.setButtonAction(new AbstractAction("Vertical ScrollBar Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton12.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"verticalScrollBar\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Vertical ScrollBar Policy Changed
        eventLabels.add(eventButton13);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("verticalScrollBarPolicy") == 0) {
                    eventFiredActions(eventButton13, evt);
                }
            }
        });
        eventButton13.setButtonAction(new AbstractAction("Vertical ScrollBar Policy Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton13.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"verticalScrollBarPolicy\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Viewport Changed
        eventLabels.add(eventButton14);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("viewport") == 0) {
                    eventFiredActions(eventButton14, evt);
                }
            }
        });
        eventButton14.setButtonAction(new AbstractAction("Viewport Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton14.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"viewport\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Viewport Border Changed
        eventLabels.add(eventButton15);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("viewportBorder") == 0) {
                    eventFiredActions(eventButton15, evt);
                }
            }
        });
        eventButton15.setButtonAction(new AbstractAction("Viewport Border Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton15.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"viewportBorder\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Wheel Scrolling Enabled Policy Changed
        eventLabels.add(eventButton16);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("wheelScrollingEnabled") == 0) {
                    eventFiredActions(eventButton16, evt);
                }
            }
        });
        eventButton16.setButtonAction(new AbstractAction("Wheel Scrolling Enabled Policy Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton16.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"wheelScrollingEnabled\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //Key Changed
        eventLabels.add(eventButton17);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.LOWER_LEFT_CORNER) == 0) {
                    eventFiredActions(eventButton17, evt);
                }
            }
        });
        eventButton17.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton17.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton18);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.LOWER_RIGHT_CORNER) == 0) {
                    eventFiredActions(eventButton18, evt);
                }
            }
        });
        eventButton18.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton18.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton19);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.LOWER_LEADING_CORNER) == 0) {
                    eventFiredActions(eventButton19, evt);
                }
            }
        });
        eventButton19.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton19.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton20);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.LOWER_TRAILING_CORNER) == 0) {
                    eventFiredActions(eventButton20, evt);
                }
            }
        });
        eventButton20.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton20.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton21);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.UPPER_LEFT_CORNER) == 0) {
                    eventFiredActions(eventButton21, evt);
                }
            }
        });
        eventButton21.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton21.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton22);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.UPPER_RIGHT_CORNER) == 0) {
                    eventFiredActions(eventButton22, evt);
                }
            }
        });
        eventButton22.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton22.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton23);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.UPPER_LEADING_CORNER) == 0) {
                    eventFiredActions(eventButton23, evt);
                }
            }
        });
        eventButton23.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton23.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //Key Changed
        eventLabels.add(eventButton24);
        jScrollPane.addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo(ScrollPaneConstants.UPPER_TRAILING_CORNER) == 0) {
                    eventFiredActions(eventButton24, evt);
                }
            }
        });
        eventButton24.setButtonAction(new AbstractAction("Key Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton24.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(key) == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //JScrollBar Block Increment Changed
        eventLabels.add(eventButton25);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("blockIncrement") == 0) {
                    eventFiredActions(eventButton25, evt);
                }
            }
        });
        eventButton25.setButtonAction(new AbstractAction("JScrollBar Block Increment Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton25.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"blockIncrement\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Model Changed
        eventLabels.add(eventButton26);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("model") == 0) {
                    eventFiredActions(eventButton26, evt);
                }
            }
        });
        eventButton26.setButtonAction(new AbstractAction("JScrollBar Model Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton26.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"model\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Orientation Changed
        eventLabels.add(eventButton27);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("orientation") == 0) {
                    eventFiredActions(eventButton27, evt);
                }
            }
        });
        eventButton27.setButtonAction(new AbstractAction("JScrollBar Orientation Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton27.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"orientation\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Unit Increment Changed
        eventLabels.add(eventButton28);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("unitIncrement") == 0) {
                    eventFiredActions(eventButton28, evt);
                }
            }
        });
        eventButton28.setButtonAction(new AbstractAction("JScrollBar Unit Increment Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton28.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"unitIncrement\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
        
        //JScrollBar Block Increment Changed
        eventLabels.add(eventButton29);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("blockIncrement") == 0) {
                    eventFiredActions(eventButton29, evt);
                }
            }
        });
        eventButton29.setButtonAction(new AbstractAction("JScrollBar Block Increment Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton29.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"blockIncrement\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Model Changed
        eventLabels.add(eventButton30);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("model") == 0) {
                    eventFiredActions(eventButton30, evt);
                }
            }
        });
        eventButton30.setButtonAction(new AbstractAction("JScrollBar Model Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton30.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"model\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Orientation Changed
        eventLabels.add(eventButton31);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("orientation") == 0) {
                    eventFiredActions(eventButton31, evt);
                }
            }
        });
        eventButton31.setButtonAction(new AbstractAction("JScrollBar Orientation Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton31.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"orientation\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });

        //JScrollBar Unit Increment Changed
        eventLabels.add(eventButton32);
        jScrollPane.getVerticalScrollBar().addPropertyChangeListener(new PropertyChangeListener() {
           @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().compareTo("unitIncrement") == 0) {
                    eventFiredActions(eventButton32, evt);
                }
            }
        });
        eventButton32.setButtonAction(new AbstractAction("JScrollBar Unit Increment Changed") {
           @Override
           public void actionPerformed(ActionEvent e) {
               setCodeTextArea("/* " + eventButton32.getEventLabel() + " Event Listener */\n\n"
                        + "jScrollPane1.addPropertyChangeListener(new PropertyChangeListener() {\n"
                        + "    @Override\n"
                        + "    public void propertyChange(PropertyChangeEvent evt) {\n"
                        + "        if (evt.getPropertyName().compareTo(\"unitIncrement\") == 0) {\n"
                        + "            System.out.println(\"A Change has happened\");\n"
                        + "        }\n"
                        + "    }\n"
                        + "});");
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JScrollPanePanel2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JScrollPanePanel2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JScrollPanePanel2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JScrollPanePanel2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                frame.add(new JScrollPanePanel2());
                frame.setTitle("JScrollPane Example");
                frame.setSize(1200, 800);
                frame.setVisible(true);
            }
        });
    }
    
    private void updateRowAndColumnHeaders() {
        if (jScrollPane.getRowHeader() != null && jScrollPane.getRowHeader().getView() != null) {
            int width = jScrollPane.getRowHeader().getView().getPreferredSize().width;
            width = Math.max(width, jScrollPane.getRowHeader().getView().getWidth());
            int height = 10;
            if (jScrollPane.getViewport() != null && jScrollPane.getViewport().getView() != null) {
                if (jScrollPane.getViewport().getView().getHeight() > 0) {
                    height = jScrollPane.getViewport().getView().getHeight();
                }
            }
            jScrollPane.getRowHeader().getView().setPreferredSize(new Dimension(width, height));
        }
        
        if (jScrollPane.getColumnHeader() != null && jScrollPane.getColumnHeader().getView() != null) {
            int height = jScrollPane.getColumnHeader().getView().getPreferredSize().height;
            height = Math.max(height, jScrollPane.getColumnHeader().getView().getHeight());
            int width = 10;
            if (jScrollPane.getViewport() != null && jScrollPane.getViewport().getView() != null) {
                if (jScrollPane.getViewport().getView().getWidth() > 0) {
                    width = jScrollPane.getViewport().getView().getWidth();
                }
            }
            jScrollPane.getColumnHeader().getView().setPreferredSize(new Dimension(width, height));
        }
    }
}
