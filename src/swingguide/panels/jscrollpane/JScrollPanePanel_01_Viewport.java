/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package swingguide.panels.jscrollpane;

import java.awt.Color;
import swingguide.helpers.ComponentPanel;
import swingguide.helpers.ComponentTemplate;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.AdjustmentEvent;
import java.awt.event.AdjustmentListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.AbstractAction;
import javax.swing.ButtonModel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Light
 */
public class JScrollPanePanel_01_Viewport extends ComponentPanel {

    private int itemCounter = 0;

    private JScrollPane jScrollPane1;
    private JScrollPanePanel jScrollPanePanel;

    /**
     * Creates new form NewJPanel
     */
    public JScrollPanePanel_01_Viewport() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup(){
            @Override
            public void setSelected(ButtonModel m, boolean b){
                if(!b && isSelected(m)){
                    clearSelection();
                } else {
                    super.setSelected(m, b);
                }
            }
        };
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jRadioButton3 = new javax.swing.JRadioButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Set with JPanel");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Set with JTable");

        jLabel1.setText("Viewport Extent Size:");

        jLabel2.setText("Viewport Component Prefered Size: N/A");

        jLabel7.setText("ViewPort Component Size: N/A");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Set with JTextArea");

        jCheckBox1.setText("Change Viewport Component Size");

        jButton1.setText("Scroll Rect to Visible");

        jButton2.setText("Set Scroll Mode");

        jLabel3.setText("Viewport Component Position: N/A");

        jLabel5.setText("BLIT_SCROLL_MODE");

        jCheckBox2.setText("Change Viewport Component Position");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton3)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox2)
                            .addComponent(jLabel3)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    // End of variables declaration//GEN-END:variables

    private String getNextItemPrefix() {
        String prefix = "";
        int tempCounter = itemCounter;
        do {
            int temp = tempCounter % 26;
            tempCounter = (tempCounter - temp) / 26;
            if (temp >= 0) {
                prefix = ((char) (temp + 65)) + prefix;
            }
        } while (tempCounter > 0);
        itemCounter++;
        return prefix + " - ";
    }

    @Override
    public String getTitle() {
        return "Viewport";
    }
    
    private void updateViewportDimentions() {
        Dimension viewExtentDim = jScrollPane1.getViewport().getExtentSize();
        jLabel1.setText("Viewport Extent Size: (" + (int) viewExtentDim.getWidth() + "w, " + (int) viewExtentDim.getHeight() + "h)");
        Component comp = jScrollPane1.getViewport().getView();
        if (comp != null) {
            Dimension viewCompPrefDim = jScrollPane1.getViewport().getPreferredSize();
            Dimension viewCompDim = jScrollPane1.getViewport().getViewSize();
            Point position = jScrollPane1.getViewport().getViewPosition();
            Rectangle rect = jScrollPane1.getViewport().getViewRect();
            jLabel2.setText("Viewport Component Prefered Size: (" + (int) viewCompPrefDim.getWidth() + "w, " + (int) viewCompPrefDim.getHeight() + "h)");
            jLabel7.setText("Viewport Component Size: (" + (int) viewCompDim.getWidth() + "w, " + (int) viewCompDim.getHeight() + "h)");
            jLabel3.setText("Viewport Component Position: (" + position.x + ", " + position.y + ")");
            
        } else {
            Dimension viewCompPrefDim = jScrollPane1.getViewport().getPreferredSize();
            Dimension viewCompDim = jScrollPane1.getViewport().getViewSize();
            jLabel2.setText("Viewport Component Prefered Size: N/A)");
            jLabel7.setText("Viewport Component Size: N/A");
            jLabel3.setText("Viewport Component Position: N/A");
        }
    }

    @Override
    public void setup(Component primaryComponent, ComponentTemplate componentTemplate) {

        jScrollPane1 = (JScrollPane) primaryComponent;
        jScrollPanePanel = (JScrollPanePanel) componentTemplate;

        jScrollPane1.addComponentListener(new ComponentAdapter(){
            @Override
            public void componentResized(ComponentEvent e) {
                updateViewportDimentions();
            }
        });
        jScrollPane1.getVerticalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                updateViewportDimentions();
            }
        });
        jScrollPane1.getHorizontalScrollBar().addAdjustmentListener(new AdjustmentListener() {
            @Override
            public void adjustmentValueChanged(AdjustmentEvent e) {
                updateViewportDimentions();
            }
        });

        //Set Viewport Size (i.e. Extent Size)
        jLabel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Set Viewport Size (i.e. Extent Size)  */\n\n"
                        + "Dimension viewExtentDim = jScrollPane1.getViewport().getExtentSize();\n"
                        + "System.out.println(\"Viewport Extent Size: (\" + (int) viewExtentDim.getWidth() + \"w, \" + (int) viewExtentDim.getHeight() + \"h)\");\n"
                );
            }
        });

        //Set View to JPanel
        jRadioButton1.setAction(new AbstractAction(jRadioButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton1.isSelected()) {
                    JPanel panel = new JPanel();
                    panel.setBorder(new LineBorder(Color.GREEN, 4));
                    panel.setPreferredSize(new Dimension(2000, 2000));
                    panel.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateViewportDimentions();
                        }
                    });
                    jScrollPane1.setViewportView(panel);
                } else {
                    jScrollPane1.setViewportView(null);
                }
                updateViewportDimentions();
                componentTemplate.setCodeTextArea(
                        "/*  Set View to JPanel  */\n\n"
                        + "JPanel panel = new JPanel();\n"
                        + "panel.setBorder(new LineBorder(Color.GREEN, 4));\n"
                        + "panel.setPreferredSize(new Dimension(2000, 2000));\n"
                        + "jScrollPane1.setViewportView(panel);\n"
                );
            }
        });

        //Set View to JTable
        jRadioButton2.setAction(new AbstractAction(jRadioButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton2.isSelected()) {
                    Object[][] array = new Object[300][10];
                    Object[] columns = new Object[10];
                    for (int index = 0; index < 10; index++) {
                        for (int index2 = 0; index2 < 300; index2++) {
                            array[index2][index] = "value" + index + index2;
                        }
                        columns[index] = "Column" + index;
                    }
                    JTable jTable = new JTable(array, columns);
                    jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                    jTable.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateViewportDimentions();
                        }

                    });
                    jScrollPane1.setViewportView(jTable);
                } else {
                    jScrollPane1.setViewportView(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set View to JTable  */\n\n"
                        + "String[][] data = new String[][]{new String[]{\"v11\",\"v12\"},new String[]{\"v21\",\"v22\"}};\n"
                        + "String[] columns = new String[]{\"First\",\"Second\"};\n"
                        + "JTable jTable = new JTable(data, columns);\n"
                        + "jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n"
                        + "jScrollPane1.setViewportView(jTable);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Note:\n"
                        + "    Will set the JScrollPane's ColumnHeader to be the JTableHeader of the JTable.\n"
                        + "*/\n"
                );
            }
        });

        //Set View to JTextArea
        jRadioButton3.setAction(new AbstractAction(jRadioButton3.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jRadioButton3.isSelected()) {
                    JTextArea textArea = new JTextArea();
                    textArea.getDocument().addDocumentListener(new DocumentListener() {
                        @Override
                        public void insertUpdate(DocumentEvent e) {
                            updateViewportDimentions();
                        }

                        @Override
                        public void removeUpdate(DocumentEvent e) {
                            updateViewportDimentions();
                        }

                        @Override
                        public void changedUpdate(DocumentEvent e) {
                            updateViewportDimentions();
                        }
                    });
                    textArea.addComponentListener(new ComponentAdapter() {
                        @Override
                        public void componentResized(ComponentEvent e) {
                            updateViewportDimentions();
                        }

                    });
                    jScrollPane1.setViewportView(textArea);
                } else {
                    jScrollPane1.setViewportView(null);
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set View to JTextArea  */\n\n"
                        + "JTextArea textArea = new JTextArea();\n"
                        + "jScrollPane1.setViewportView(textArea);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Note:\n"
                        + "    Will adjust the View size to accommodate the size of the JTextArea as needed.\n"
                        + "*/\n"
                );
            }
        });

        //Get Viewport Position
        jLabel3.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Get Viewport Position  */\n\n"
                        + "Point position = jScrollPane1.getViewport().getViewPosition();\n"
                        + "System.out.println(\"Viewport Component Position: (\" + position.x + \", \" + position.y + \")\");\n"
                );
            }
        });

        //Set Viewport Position
        jCheckBox2.setAction(new AbstractAction(jCheckBox2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox2.isSelected()) {
                    if (jScrollPane1.getViewport().getView() != null) {
                        jScrollPane1.getViewport().setViewPosition(new Point(100, 100));
                    }
                } else {
                    if (jScrollPane1.getViewport().getView() != null) {
                        jScrollPane1.getViewport().setViewPosition(new Point(0, 0));
                    }
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Viewport Position  */\n\n"
                        + "if (jScrollPane1.getViewport().getView() != null) {\n"
                        + "    jScrollPane1.getViewport().setViewPosition(new Point(100, 100));\n"
                        + "}\n"
                );
            }
        });

        //Get Viewport Component (i.e. View) Preferred Size
        jLabel2.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Get Viewport Component (i.e. View) Preferred Size  */\n\n"
                        + "if (jScrollPane1.getViewport().getView() != null) {\n"
                        + "    Dimension viewCompPrefDim = jScrollPane1.getViewport().getView().getPreferredSize();\n"
                        + "    System.out.println(\"Viewport Component Prefered Size: (\" + (int) viewCompPrefDim.getWidth() + \"w, \" + (int) viewCompPrefDim.getHeight() + \"h)\");\n"
                        + "}\n"
                );
            }
        });

        //Get Viewport Component (i.e. View) Size
        jLabel7.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                componentTemplate.setCodeTextArea(
                        "/*  Get Viewport Component (i.e. View) Size  */\n\n"
                        + "Dimension viewCompDim = jScrollPane1.getViewport().getViewSize();\n"
                        + "System.out.println(\"Viewport Component Size: (\" + (int) viewCompDim.getWidth() + \"w, \" + (int) viewCompDim.getHeight() + \"h)\");\n"
                );
            }
        });

        //Set Viewport Component (i.e. View) Size
        jCheckBox1.setAction(new AbstractAction(jCheckBox1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jCheckBox1.isSelected()) {
                    if (jScrollPane1.getViewport().getView() != null) {
                        jScrollPane1.getViewport().getView().setSize(new Dimension(3000, 3000));
                        jScrollPane1.getViewport().getView().setPreferredSize(new Dimension(3000, 3000));
                    }
                } else {
                    if (jScrollPane1.getViewport().getView() != null) {
                        jScrollPane1.getViewport().getView().setSize(new Dimension(100, 100));
                        jScrollPane1.getViewport().getView().setPreferredSize(new Dimension(100, 100));
                    }
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set Viewport Component (i.e. View) Size  */\n\n"
                        + "if (jScrollPane1.getViewport().getView() != null) {\n"
                        + "    jScrollPane1.getViewport().getView().setSize(new Dimension(2000, 2000));\n"
                        + "    jScrollPane1.getViewport().getView().setPreferredSize(new Dimension(2000, 2000));\n"
                        + "}\n"
                );
            }
        });

        //Scroll the Viewport to a Desired Rectangle
        jButton1.setAction(new AbstractAction(jButton1.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                Rectangle rect = new Rectangle(200, 200, 500, 500);
                jScrollPane1.getViewport().scrollRectToVisible(rect);
                componentTemplate.setCodeTextArea(
                        "/*  Scroll the Viewport to a Desired Rectangle  */\n\n"
                        + "Rectangle rect = new Rectangle(200,200,500,500);\n"
                        + "jScrollPane1.getViewport().scrollRectToVisible(rect);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    With the current possition of the Viewport's upper left corner being considered\n"
                        + "    (0,0), scroll to make the provided Rectangle as visible as possible.\n"
                        + "*/\n"
                );
            }
        });

        //Set the Scroll Mode
        jButton2.setAction(new AbstractAction(jButton2.getText()) {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (jScrollPane1.getViewport().getScrollMode() == JViewport.BLIT_SCROLL_MODE) {
                    jScrollPane1.getViewport().setScrollMode(JViewport.BACKINGSTORE_SCROLL_MODE);
                    jLabel5.setText("BACKINGSTORE_SCROLL_MODE");
                } else if (jScrollPane1.getViewport().getScrollMode() == JViewport.BACKINGSTORE_SCROLL_MODE) {
                    jScrollPane1.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);
                    jLabel5.setText("SIMPLE_SCROLL_MODE");
                } else if (jScrollPane1.getViewport().getScrollMode() == JViewport.SIMPLE_SCROLL_MODE) {
                    jScrollPane1.getViewport().setScrollMode(JViewport.BLIT_SCROLL_MODE);
                    jLabel5.setText("BLIT_SCROLL_MODE");
                }
                componentTemplate.setCodeTextArea(
                        "/*  Set the Scroll Mode  */\n\n"
                        + "jScrollPane1.getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);\n"
                        + "\n"
                        + "\n"
                        + "/*\n"
                        + "Description:\n"
                        + "    Used to set the drawing mode used during scrolling the Viewport\n"
                        + "\n"
                        + "    BLIT_SCROLL_MODE (default): A fast method of drawing (Bit Block Transfer) that uses Graphics.copyArea\n"
                        + "    BACKINGSTORE_SCROLL_MODE: Painting will start at this JViewport (not an ancestor)\n"
                        + "    SIMPLE_SCROLL_MODE: Redraw from stratch everytime\n"
                        + "*/\n"
                );
            }
        });
    }
}
